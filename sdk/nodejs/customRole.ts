// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly custom role resource.
 *
 * > **Note:** Custom roles are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
 *
 * This resource allows you to create and manage custom roles within your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = new launchdarkly.CustomRole("example", {
 *     key: "example-role-key-1",
 *     name: "example role",
 *     description: "This is an example role",
 *     policyStatements: [
 *         {
 *             effect: "allow",
 *             resources: ["proj/*:env/production:flag/*"],
 *             actions: ["*"],
 *         },
 *         {
 *             effect: "allow",
 *             resources: ["proj/*:env/production"],
 *             actions: ["*"],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import launchdarkly:index/customRole:CustomRole example example-role-key-1
 * ```
 */
export class CustomRole extends pulumi.CustomResource {
    /**
     * Get an existing CustomRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomRoleState, opts?: pulumi.CustomResourceOptions): CustomRole {
        return new CustomRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/customRole:CustomRole';

    /**
     * Returns true if the given object is an instance of CustomRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomRole.__pulumiType;
    }

    /**
     * The base permission level - either `reader` or `noAccess`. While newer API versions default to `noAccess`, this field defaults to `reader` in keeping with previous API versions.
     */
    public readonly basePermissions!: pulumi.Output<string | undefined>;
    /**
     * Description of the custom role.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * A name for the custom role. This must be unique within your organization.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated 'policy' is now deprecated. Please migrate to 'policy_statements' to maintain future compatability.
     */
    public readonly policies!: pulumi.Output<outputs.CustomRolePolicy[] | undefined>;
    /**
     * An array of the policy statements that define the permissions for the custom role. This field accepts [role attributes](https://docs.launchdarkly.com/home/getting-started/vocabulary#role-attribute). To use role attributes, use the syntax `$${roleAttribute/<YOUR_ROLE_ATTRIBUTE>}` in lieu of your usual resource keys.
     */
    public readonly policyStatements!: pulumi.Output<outputs.CustomRolePolicyStatement[] | undefined>;

    /**
     * Create a CustomRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomRoleArgs | CustomRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomRoleState | undefined;
            resourceInputs["basePermissions"] = state ? state.basePermissions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["policyStatements"] = state ? state.policyStatements : undefined;
        } else {
            const args = argsOrState as CustomRoleArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["basePermissions"] = args ? args.basePermissions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["policyStatements"] = args ? args.policyStatements : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomRole resources.
 */
export interface CustomRoleState {
    /**
     * The base permission level - either `reader` or `noAccess`. While newer API versions default to `noAccess`, this field defaults to `reader` in keeping with previous API versions.
     */
    basePermissions?: pulumi.Input<string>;
    /**
     * Description of the custom role.
     */
    description?: pulumi.Input<string>;
    /**
     * A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key?: pulumi.Input<string>;
    /**
     * A name for the custom role. This must be unique within your organization.
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated 'policy' is now deprecated. Please migrate to 'policy_statements' to maintain future compatability.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.CustomRolePolicy>[]>;
    /**
     * An array of the policy statements that define the permissions for the custom role. This field accepts [role attributes](https://docs.launchdarkly.com/home/getting-started/vocabulary#role-attribute). To use role attributes, use the syntax `$${roleAttribute/<YOUR_ROLE_ATTRIBUTE>}` in lieu of your usual resource keys.
     */
    policyStatements?: pulumi.Input<pulumi.Input<inputs.CustomRolePolicyStatement>[]>;
}

/**
 * The set of arguments for constructing a CustomRole resource.
 */
export interface CustomRoleArgs {
    /**
     * The base permission level - either `reader` or `noAccess`. While newer API versions default to `noAccess`, this field defaults to `reader` in keeping with previous API versions.
     */
    basePermissions?: pulumi.Input<string>;
    /**
     * Description of the custom role.
     */
    description?: pulumi.Input<string>;
    /**
     * A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key: pulumi.Input<string>;
    /**
     * A name for the custom role. This must be unique within your organization.
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated 'policy' is now deprecated. Please migrate to 'policy_statements' to maintain future compatability.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.CustomRolePolicy>[]>;
    /**
     * An array of the policy statements that define the permissions for the custom role. This field accepts [role attributes](https://docs.launchdarkly.com/home/getting-started/vocabulary#role-attribute). To use role attributes, use the syntax `$${roleAttribute/<YOUR_ROLE_ATTRIBUTE>}` in lieu of your usual resource keys.
     */
    policyStatements?: pulumi.Input<pulumi.Input<inputs.CustomRolePolicyStatement>[]>;
}
