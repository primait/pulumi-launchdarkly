// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const buildingMaterials = new launchdarkly.FeatureFlag("building_materials", {
 *     projectKey: example.key,
 *     key: "building-materials",
 *     name: "Building materials",
 *     description: "this is a multivariate flag with string variations.",
 *     variationType: "string",
 *     variations: [
 *         {
 *             value: "straw",
 *             name: "Straw",
 *             description: "Watch out for wind.",
 *         },
 *         {
 *             value: "sticks",
 *             name: "Sticks",
 *             description: "Sturdier than straw",
 *         },
 *         {
 *             value: "bricks",
 *             name: "Bricks",
 *             description: "The strongest variation",
 *         },
 *     ],
 *     clientSideAvailabilities: [{
 *         usingEnvironmentId: false,
 *         usingMobileKey: true,
 *     }],
 *     defaults: {
 *         onVariation: 2,
 *         offVariation: 0,
 *     },
 *     tags: [
 *         "example",
 *         "terraform",
 *         "multivariate",
 *         "building-materials",
 *     ],
 * });
 * const jsonExample = new launchdarkly.FeatureFlag("json_example", {
 *     projectKey: "example-project",
 *     key: "json-example",
 *     name: "JSON example flag",
 *     variationType: "json",
 *     variations: [
 *         {
 *             name: "Single foo",
 *             value: JSON.stringify({
 *                 foo: "bar",
 *             }),
 *         },
 *         {
 *             name: "Multiple foos",
 *             value: JSON.stringify({
 *                 foos: [
 *                     "bar1",
 *                     "bar2",
 *                 ],
 *             }),
 *         },
 *     ],
 *     defaults: {
 *         onVariation: 1,
 *         offVariation: 0,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Import a feature flag using the feature flag's ID in the format `project_key/flag_key`.
 *
 * ```sh
 * $ pulumi import launchdarkly:index/featureFlag:FeatureFlag building_materials example-project/building-materials
 * ```
 */
export class FeatureFlag extends pulumi.CustomResource {
    /**
     * Get an existing FeatureFlag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureFlagState, opts?: pulumi.CustomResourceOptions): FeatureFlag {
        return new FeatureFlag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/featureFlag:FeatureFlag';

    /**
     * Returns true if the given object is an instance of FeatureFlag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureFlag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureFlag.__pulumiType;
    }

    /**
     * Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
     */
    public readonly archived!: pulumi.Output<boolean | undefined>;
    public readonly clientSideAvailabilities!: pulumi.Output<outputs.FeatureFlagClientSideAvailability[]>;
    /**
     * List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
     */
    public readonly customProperties!: pulumi.Output<outputs.FeatureFlagCustomProperty[] | undefined>;
    /**
     * A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
     */
    public readonly defaults!: pulumi.Output<outputs.FeatureFlagDefaults>;
    /**
     * The feature flag's description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `includeInSnippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
     *
     * @deprecated 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.
     */
    public readonly includeInSnippet!: pulumi.Output<boolean>;
    /**
     * The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    public readonly key!: pulumi.Output<string>;
    public readonly maintainerId!: pulumi.Output<string>;
    /**
     * The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
     */
    public readonly maintainerTeamKey!: pulumi.Output<string>;
    /**
     * The human-readable name of the feature flag.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    public readonly projectKey!: pulumi.Output<string>;
    /**
     * Tags associated with your resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether the flag is a temporary flag.
     */
    public readonly temporary!: pulumi.Output<boolean | undefined>;
    /**
     * The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    public readonly variationType!: pulumi.Output<string>;
    /**
     * An array of possible variations for the flag
     */
    public readonly variations!: pulumi.Output<outputs.FeatureFlagVariation[]>;

    /**
     * Create a FeatureFlag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureFlagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureFlagArgs | FeatureFlagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureFlagState | undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["clientSideAvailabilities"] = state ? state.clientSideAvailabilities : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["defaults"] = state ? state.defaults : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["includeInSnippet"] = state ? state.includeInSnippet : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["maintainerId"] = state ? state.maintainerId : undefined;
            resourceInputs["maintainerTeamKey"] = state ? state.maintainerTeamKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["temporary"] = state ? state.temporary : undefined;
            resourceInputs["variationType"] = state ? state.variationType : undefined;
            resourceInputs["variations"] = state ? state.variations : undefined;
        } else {
            const args = argsOrState as FeatureFlagArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.projectKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectKey'");
            }
            if ((!args || args.variationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variationType'");
            }
            resourceInputs["archived"] = args ? args.archived : undefined;
            resourceInputs["clientSideAvailabilities"] = args ? args.clientSideAvailabilities : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["defaults"] = args ? args.defaults : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["includeInSnippet"] = args ? args.includeInSnippet : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["maintainerId"] = args ? args.maintainerId : undefined;
            resourceInputs["maintainerTeamKey"] = args ? args.maintainerTeamKey : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["temporary"] = args ? args.temporary : undefined;
            resourceInputs["variationType"] = args ? args.variationType : undefined;
            resourceInputs["variations"] = args ? args.variations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FeatureFlag.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FeatureFlag resources.
 */
export interface FeatureFlagState {
    /**
     * Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
     */
    archived?: pulumi.Input<boolean>;
    clientSideAvailabilities?: pulumi.Input<pulumi.Input<inputs.FeatureFlagClientSideAvailability>[]>;
    /**
     * List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
     */
    customProperties?: pulumi.Input<pulumi.Input<inputs.FeatureFlagCustomProperty>[]>;
    /**
     * A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
     */
    defaults?: pulumi.Input<inputs.FeatureFlagDefaults>;
    /**
     * The feature flag's description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `includeInSnippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
     *
     * @deprecated 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.
     */
    includeInSnippet?: pulumi.Input<boolean>;
    /**
     * The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key?: pulumi.Input<string>;
    maintainerId?: pulumi.Input<string>;
    /**
     * The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
     */
    maintainerTeamKey?: pulumi.Input<string>;
    /**
     * The human-readable name of the feature flag.
     */
    name?: pulumi.Input<string>;
    /**
     * The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Tags associated with your resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the flag is a temporary flag.
     */
    temporary?: pulumi.Input<boolean>;
    /**
     * The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    variationType?: pulumi.Input<string>;
    /**
     * An array of possible variations for the flag
     */
    variations?: pulumi.Input<pulumi.Input<inputs.FeatureFlagVariation>[]>;
}

/**
 * The set of arguments for constructing a FeatureFlag resource.
 */
export interface FeatureFlagArgs {
    /**
     * Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
     */
    archived?: pulumi.Input<boolean>;
    clientSideAvailabilities?: pulumi.Input<pulumi.Input<inputs.FeatureFlagClientSideAvailability>[]>;
    /**
     * List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
     */
    customProperties?: pulumi.Input<pulumi.Input<inputs.FeatureFlagCustomProperty>[]>;
    /**
     * A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
     */
    defaults?: pulumi.Input<inputs.FeatureFlagDefaults>;
    /**
     * The feature flag's description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `includeInSnippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
     *
     * @deprecated 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.
     */
    includeInSnippet?: pulumi.Input<boolean>;
    /**
     * The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key: pulumi.Input<string>;
    maintainerId?: pulumi.Input<string>;
    /**
     * The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
     */
    maintainerTeamKey?: pulumi.Input<string>;
    /**
     * The human-readable name of the feature flag.
     */
    name?: pulumi.Input<string>;
    /**
     * The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    projectKey: pulumi.Input<string>;
    /**
     * Tags associated with your resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the flag is a temporary flag.
     */
    temporary?: pulumi.Input<boolean>;
    /**
     * The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    variationType: pulumi.Input<string>;
    /**
     * An array of possible variations for the flag
     */
    variations?: pulumi.Input<pulumi.Input<inputs.FeatureFlagVariation>[]>;
}
