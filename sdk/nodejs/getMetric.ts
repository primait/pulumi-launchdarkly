// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly metric data source.
 *
 * This data source allows you to retrieve metric information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getMetric({
 *     key: "example-metric",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getMetric(args: GetMetricArgs, opts?: pulumi.InvokeOptions): Promise<GetMetricResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getMetric:getMetric", {
        "isActive": args.isActive,
        "key": args.key,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetric.
 */
export interface GetMetricArgs {
    /**
     * Ignored. All metrics are considered active.
     *
     * @deprecated No longer in use. This field will be removed in a future major release of the LaunchDarkly provider.
     */
    isActive?: boolean;
    /**
     * The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key: string;
    /**
     * The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    projectKey: string;
}

/**
 * A collection of values returned by getMetric.
 */
export interface GetMetricResult {
    /**
     * The method for analyzing metric events. Available choices are `mean` and `percentile`.
     */
    readonly analysisType: string;
    /**
     * The description of the metric's purpose.
     */
    readonly description: string;
    /**
     * The event key for your metric (if custom metric)
     */
    readonly eventKey: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Include units that did not send any events and set their value to 0.
     */
    readonly includeUnitsWithoutEvents: boolean;
    /**
     * Ignored. All metrics are considered active.
     *
     * @deprecated No longer in use. This field will be removed in a future major release of the LaunchDarkly provider.
     */
    readonly isActive: boolean;
    /**
     * Whether a `custom` metric is a numeric metric or not.
     */
    readonly isNumeric: boolean;
    /**
     * The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    readonly key: string;
    /**
     * The metric type. Available choices are `click`, `custom`, and `pageview`.
     */
    readonly kind: string;
    readonly maintainerId: string;
    /**
     * The human-friendly name for the metric.
     */
    readonly name: string;
    /**
     * The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when analysisType is percentile.
     */
    readonly percentileValue: number;
    /**
     * The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    readonly projectKey: string;
    /**
     * A set of one or more context kinds that this metric can measure events from. Metrics can only use context kinds marked as "Available for experiments." For more information, read [Allocating experiment audiences](https://docs.launchdarkly.com/home/creating-experiments/allocation).
     */
    readonly randomizationUnits: string[];
    /**
     * The CSS selector for your metric (if click metric)
     */
    readonly selector: string;
    /**
     * The success criteria for your metric (if numeric metric). Available choices are `HigherThanBaseline` and `LowerThanBaseline`.
     */
    readonly successCriteria: string;
    /**
     * Tags associated with your resource.
     */
    readonly tags: string[];
    /**
     * (Required for kind `custom`) The unit for numeric `custom` metrics.
     */
    readonly unit: string;
    /**
     * The method by which multiple unit event values are aggregated. Available choices are `average` and `sum`.
     */
    readonly unitAggregationType: string;
    /**
     * List of nested `url` blocks describing URLs that you want to associate with the metric.
     */
    readonly urls: outputs.GetMetricUrl[];
    /**
     * Version of the metric
     */
    readonly version: number;
}
/**
 * Provides a LaunchDarkly metric data source.
 *
 * This data source allows you to retrieve metric information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getMetric({
 *     key: "example-metric",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getMetricOutput(args: GetMetricOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMetricResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("launchdarkly:index/getMetric:getMetric", {
        "isActive": args.isActive,
        "key": args.key,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetric.
 */
export interface GetMetricOutputArgs {
    /**
     * Ignored. All metrics are considered active.
     *
     * @deprecated No longer in use. This field will be removed in a future major release of the LaunchDarkly provider.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key: pulumi.Input<string>;
    /**
     * The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    projectKey: pulumi.Input<string>;
}
