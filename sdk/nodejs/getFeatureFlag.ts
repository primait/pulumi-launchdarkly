// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly feature flag data source.
 *
 * This data source allows you to retrieve feature flag information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getFeatureFlag({
 *     key: "example-flag",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getFeatureFlag(args: GetFeatureFlagArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureFlagResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getFeatureFlag:getFeatureFlag", {
        "key": args.key,
        "maintainerId": args.maintainerId,
        "maintainerTeamKey": args.maintainerTeamKey,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getFeatureFlag.
 */
export interface GetFeatureFlagArgs {
    /**
     * The unique feature flag key that references the flag in your application code.
     */
    key: string;
    maintainerId?: string;
    /**
     * The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
     */
    maintainerTeamKey?: string;
    /**
     * The feature flag's project key.
     */
    projectKey: string;
}

/**
 * A collection of values returned by getFeatureFlag.
 */
export interface GetFeatureFlagResult {
    /**
     * Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
     */
    readonly archived: boolean;
    readonly clientSideAvailabilities: outputs.GetFeatureFlagClientSideAvailability[];
    /**
     * List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
     */
    readonly customProperties: outputs.GetFeatureFlagCustomProperty[];
    /**
     * A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
     */
    readonly defaults: outputs.GetFeatureFlagDefault[];
    /**
     * The feature flag's description.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `includeInSnippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
     *
     * @deprecated 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.
     */
    readonly includeInSnippet: boolean;
    /**
     * The unique feature flag key that references the flag in your application code.
     */
    readonly key: string;
    readonly maintainerId: string;
    /**
     * The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
     */
    readonly maintainerTeamKey: string;
    /**
     * The feature flag's human-readable name
     */
    readonly name: string;
    /**
     * The feature flag's project key.
     */
    readonly projectKey: string;
    /**
     * Tags associated with your resource.
     */
    readonly tags: string[];
    /**
     * Specifies whether the flag is a temporary flag.
     */
    readonly temporary: boolean;
    /**
     * The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
     */
    readonly variationType: string;
    /**
     * An array of possible variations for the flag
     */
    readonly variations: outputs.GetFeatureFlagVariation[];
}
/**
 * Provides a LaunchDarkly feature flag data source.
 *
 * This data source allows you to retrieve feature flag information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getFeatureFlag({
 *     key: "example-flag",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getFeatureFlagOutput(args: GetFeatureFlagOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFeatureFlagResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("launchdarkly:index/getFeatureFlag:getFeatureFlag", {
        "key": args.key,
        "maintainerId": args.maintainerId,
        "maintainerTeamKey": args.maintainerTeamKey,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getFeatureFlag.
 */
export interface GetFeatureFlagOutputArgs {
    /**
     * The unique feature flag key that references the flag in your application code.
     */
    key: pulumi.Input<string>;
    maintainerId?: pulumi.Input<string>;
    /**
     * The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
     */
    maintainerTeamKey?: pulumi.Input<string>;
    /**
     * The feature flag's project key.
     */
    projectKey: pulumi.Input<string>;
}
