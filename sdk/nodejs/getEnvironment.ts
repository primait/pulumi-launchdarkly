// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly environment data source.
 *
 * This data source allows you to retrieve environment information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getEnvironment({
 *     key: "example-env",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getEnvironment(args: GetEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getEnvironment:getEnvironment", {
        "critical": args.critical,
        "key": args.key,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvironment.
 */
export interface GetEnvironmentArgs {
    /**
     * Denotes whether the environment is critical.
     */
    critical?: boolean;
    /**
     * The project-unique key for the environment.
     */
    key: string;
    /**
     * The environment's project key.
     */
    projectKey: string;
}

/**
 * A collection of values returned by getEnvironment.
 */
export interface GetEnvironmentResult {
    /**
     * The environment's SDK key.
     */
    readonly apiKey: string;
    readonly approvalSettings: outputs.GetEnvironmentApprovalSetting[];
    /**
     * The environment's client-side ID.
     */
    readonly clientSideId: string;
    readonly color: string;
    /**
     * Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
     */
    readonly confirmChanges: boolean;
    /**
     * Denotes whether the environment is critical.
     */
    readonly critical?: boolean;
    /**
     * Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/home/data-export).
     */
    readonly defaultTrackEvents: boolean;
    /**
     * The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/home/organize/environments#ttl-settings).
     */
    readonly defaultTtl: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The project-unique key for the environment.
     */
    readonly key: string;
    /**
     * The environment's mobile key.
     */
    readonly mobileKey: string;
    readonly name: string;
    /**
     * The environment's project key.
     */
    readonly projectKey: string;
    /**
     * Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
     */
    readonly requireComments: boolean;
    /**
     * Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
     */
    readonly secureMode: boolean;
    /**
     * Tags associated with your resource.
     */
    readonly tags: string[];
}
/**
 * Provides a LaunchDarkly environment data source.
 *
 * This data source allows you to retrieve environment information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getEnvironment({
 *     key: "example-env",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getEnvironmentOutput(args: GetEnvironmentOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("launchdarkly:index/getEnvironment:getEnvironment", {
        "critical": args.critical,
        "key": args.key,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvironment.
 */
export interface GetEnvironmentOutputArgs {
    /**
     * Denotes whether the environment is critical.
     */
    critical?: pulumi.Input<boolean>;
    /**
     * The project-unique key for the environment.
     */
    key: pulumi.Input<string>;
    /**
     * The environment's project key.
     */
    projectKey: pulumi.Input<string>;
}
