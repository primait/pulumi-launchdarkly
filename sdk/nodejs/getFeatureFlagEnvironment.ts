// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly environment-specific feature flag data source.
 *
 * This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getFeatureFlagEnvironment({
 *     flagId: "example-project/example-flag",
 *     envKey: "example-env",
 * });
 * ```
 */
export function getFeatureFlagEnvironment(args: GetFeatureFlagEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureFlagEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", {
        "envKey": args.envKey,
        "flagId": args.flagId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFeatureFlagEnvironment.
 */
export interface GetFeatureFlagEnvironmentArgs {
    /**
     * The environment key.
     */
    envKey: string;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    flagId: string;
}

/**
 * A collection of values returned by getFeatureFlagEnvironment.
 */
export interface GetFeatureFlagEnvironmentResult {
    /**
     * The set of nested blocks describing the individual targets for non-user context kinds for each variation.
     */
    readonly contextTargets: outputs.GetFeatureFlagEnvironmentContextTarget[];
    /**
     * The environment key.
     */
    readonly envKey: string;
    /**
     * Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
     */
    readonly fallthroughs: outputs.GetFeatureFlagEnvironmentFallthrough[];
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    readonly flagId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    readonly offVariation: number;
    /**
     * Whether targeting is enabled. Defaults to `false` if not set.
     */
    readonly on: boolean;
    /**
     * List of nested blocks describing prerequisite feature flags rules.
     */
    readonly prerequisites: outputs.GetFeatureFlagEnvironmentPrerequisite[];
    /**
     * List of logical targeting rules.
     */
    readonly rules: outputs.GetFeatureFlagEnvironmentRule[];
    /**
     * Set of nested blocks describing the individual user targets for each variation.
     */
    readonly targets: outputs.GetFeatureFlagEnvironmentTarget[];
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    readonly trackEvents: boolean;
}
/**
 * Provides a LaunchDarkly environment-specific feature flag data source.
 *
 * This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getFeatureFlagEnvironment({
 *     flagId: "example-project/example-flag",
 *     envKey: "example-env",
 * });
 * ```
 */
export function getFeatureFlagEnvironmentOutput(args: GetFeatureFlagEnvironmentOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFeatureFlagEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", {
        "envKey": args.envKey,
        "flagId": args.flagId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFeatureFlagEnvironment.
 */
export interface GetFeatureFlagEnvironmentOutputArgs {
    /**
     * The environment key.
     */
    envKey: pulumi.Input<string>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    flagId: pulumi.Input<string>;
}
