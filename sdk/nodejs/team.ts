// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly team resource.
 *
 * This resource allows you to create and manage a team within your LaunchDarkly organization.
 *
 * > **Note:** Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const platformTeam = new launchdarkly.Team("platform_team", {
 *     key: "platform_team",
 *     name: "Platform team",
 *     description: "Team to manage internal infrastructure",
 *     memberIds: [
 *         "507f1f77bcf86cd799439011",
 *         "569f183514f4432160000007",
 *     ],
 *     maintainers: ["12ab3c45de678910abc12345"],
 *     customRoleKeys: [
 *         "platform",
 *         "nomad-administrators",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * A LaunchDarkly team can be imported using the team key
 *
 * ```sh
 * $ pulumi import launchdarkly:index/team:Team platform_team platform_team
 * ```
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
     */
    public readonly customRoleKeys!: pulumi.Output<string[] | undefined>;
    /**
     * The team description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * List of member IDs for users who maintain the team.
     */
    public readonly maintainers!: pulumi.Output<string[] | undefined>;
    /**
     * List of member IDs who belong to the team.
     */
    public readonly memberIds!: pulumi.Output<string[] | undefined>;
    /**
     * A human-friendly name for the team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
     */
    public readonly roleAttributes!: pulumi.Output<outputs.TeamRoleAttribute[] | undefined>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["customRoleKeys"] = state ? state.customRoleKeys : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["maintainers"] = state ? state.maintainers : undefined;
            resourceInputs["memberIds"] = state ? state.memberIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleAttributes"] = state ? state.roleAttributes : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["customRoleKeys"] = args ? args.customRoleKeys : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["maintainers"] = args ? args.maintainers : undefined;
            resourceInputs["memberIds"] = args ? args.memberIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleAttributes"] = args ? args.roleAttributes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
     */
    customRoleKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The team description.
     */
    description?: pulumi.Input<string>;
    /**
     * The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key?: pulumi.Input<string>;
    /**
     * List of member IDs for users who maintain the team.
     */
    maintainers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of member IDs who belong to the team.
     */
    memberIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-friendly name for the team.
     */
    name?: pulumi.Input<string>;
    /**
     * A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
     */
    roleAttributes?: pulumi.Input<pulumi.Input<inputs.TeamRoleAttribute>[]>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
     */
    customRoleKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The team description.
     */
    description?: pulumi.Input<string>;
    /**
     * The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     */
    key: pulumi.Input<string>;
    /**
     * List of member IDs for users who maintain the team.
     */
    maintainers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of member IDs who belong to the team.
     */
    memberIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-friendly name for the team.
     */
    name?: pulumi.Input<string>;
    /**
     * A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
     */
    roleAttributes?: pulumi.Input<pulumi.Input<inputs.TeamRoleAttribute>[]>;
}
