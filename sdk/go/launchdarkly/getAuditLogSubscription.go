// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a LaunchDarkly audit log subscription data source.
//
// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := launchdarkly.LookupAuditLogSubscription(ctx, &launchdarkly.LookupAuditLogSubscriptionArgs{
//				Id:             "5f0cd446a77cba0b4c5644a7",
//				IntegrationKey: "msteams",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAuditLogSubscription(ctx *pulumi.Context, args *LookupAuditLogSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupAuditLogSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuditLogSubscriptionResult
	err := ctx.Invoke("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuditLogSubscription.
type LookupAuditLogSubscriptionArgs struct {
	// The audit log subscription ID.
	Id string `pulumi:"id"`
	// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
	IntegrationKey string `pulumi:"integrationKey"`
}

// A collection of values returned by getAuditLogSubscription.
type LookupAuditLogSubscriptionResult struct {
	Config map[string]string `pulumi:"config"`
	// The audit log subscription ID.
	Id string `pulumi:"id"`
	// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
	IntegrationKey string `pulumi:"integrationKey"`
	// A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
	Name string `pulumi:"name"`
	// Whether or not you want your subscription enabled, i.e. to actively send events.
	On bool `pulumi:"on"`
	// A block representing the resources to which you wish to subscribe.
	Statements []GetAuditLogSubscriptionStatement `pulumi:"statements"`
	// Tags associated with your resource.
	Tags []string `pulumi:"tags"`
}

func LookupAuditLogSubscriptionOutput(ctx *pulumi.Context, args LookupAuditLogSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupAuditLogSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAuditLogSubscriptionResultOutput, error) {
			args := v.(LookupAuditLogSubscriptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args, LookupAuditLogSubscriptionResultOutput{}, options).(LookupAuditLogSubscriptionResultOutput), nil
		}).(LookupAuditLogSubscriptionResultOutput)
}

// A collection of arguments for invoking getAuditLogSubscription.
type LookupAuditLogSubscriptionOutputArgs struct {
	// The audit log subscription ID.
	Id pulumi.StringInput `pulumi:"id"`
	// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
	IntegrationKey pulumi.StringInput `pulumi:"integrationKey"`
}

func (LookupAuditLogSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuditLogSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getAuditLogSubscription.
type LookupAuditLogSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupAuditLogSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuditLogSubscriptionResult)(nil)).Elem()
}

func (o LookupAuditLogSubscriptionResultOutput) ToLookupAuditLogSubscriptionResultOutput() LookupAuditLogSubscriptionResultOutput {
	return o
}

func (o LookupAuditLogSubscriptionResultOutput) ToLookupAuditLogSubscriptionResultOutputWithContext(ctx context.Context) LookupAuditLogSubscriptionResultOutput {
	return o
}

func (o LookupAuditLogSubscriptionResultOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// The audit log subscription ID.
func (o LookupAuditLogSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
func (o LookupAuditLogSubscriptionResultOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) string { return v.IntegrationKey }).(pulumi.StringOutput)
}

// A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
func (o LookupAuditLogSubscriptionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether or not you want your subscription enabled, i.e. to actively send events.
func (o LookupAuditLogSubscriptionResultOutput) On() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) bool { return v.On }).(pulumi.BoolOutput)
}

// A block representing the resources to which you wish to subscribe.
func (o LookupAuditLogSubscriptionResultOutput) Statements() GetAuditLogSubscriptionStatementArrayOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) []GetAuditLogSubscriptionStatement { return v.Statements }).(GetAuditLogSubscriptionStatementArrayOutput)
}

// Tags associated with your resource.
func (o LookupAuditLogSubscriptionResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuditLogSubscriptionResultOutput{})
}
