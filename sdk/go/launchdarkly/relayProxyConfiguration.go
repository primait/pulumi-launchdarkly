// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := launchdarkly.NewRelayProxyConfiguration(ctx, "example", &launchdarkly.RelayProxyConfigurationArgs{
//				Name: pulumi.String("example-config"),
//				Policies: launchdarkly.RelayProxyConfigurationPolicyArray{
//					&launchdarkly.RelayProxyConfigurationPolicyArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//						Effect: pulumi.String("allow"),
//						Resources: pulumi.StringArray{
//							pulumi.String("proj/*:env/*"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Relay Proxy configurations can be imported using the configuration's unique 24 character ID, e.g.
//
// ```sh
// $ pulumi import launchdarkly:index/relayProxyConfiguration:RelayProxyConfiguration example 51d440e30c9ff61457c710f6
// ```
//
// The unique relay proxy ID can be found in the relay proxy edit page URL, which you can locate by clicking the three dot menu on your relay proxy item in the UI and selecting 'Edit configuration':
//
// https://app.launchdarkly.com/settings/relay/THIS_IS_YOUR_RELAY_PROXY_ID/edit
type RelayProxyConfiguration struct {
	pulumi.CustomResourceState

	// The last 4 characters of the Relay Proxy configuration's unique key.
	DisplayKey pulumi.StringOutput `pulumi:"displayKey"`
	// The Relay Proxy configuration's unique key. Because the `fullKey` is only exposed upon creation, it will not be available if the resource is imported.
	FullKey pulumi.StringOutput `pulumi:"fullKey"`
	// The human-readable name for your Relay Proxy configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policies RelayProxyConfigurationPolicyArrayOutput `pulumi:"policies"`
}

// NewRelayProxyConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRelayProxyConfiguration(ctx *pulumi.Context,
	name string, args *RelayProxyConfigurationArgs, opts ...pulumi.ResourceOption) (*RelayProxyConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"fullKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RelayProxyConfiguration
	err := ctx.RegisterResource("launchdarkly:index/relayProxyConfiguration:RelayProxyConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelayProxyConfiguration gets an existing RelayProxyConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelayProxyConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RelayProxyConfigurationState, opts ...pulumi.ResourceOption) (*RelayProxyConfiguration, error) {
	var resource RelayProxyConfiguration
	err := ctx.ReadResource("launchdarkly:index/relayProxyConfiguration:RelayProxyConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RelayProxyConfiguration resources.
type relayProxyConfigurationState struct {
	// The last 4 characters of the Relay Proxy configuration's unique key.
	DisplayKey *string `pulumi:"displayKey"`
	// The Relay Proxy configuration's unique key. Because the `fullKey` is only exposed upon creation, it will not be available if the resource is imported.
	FullKey *string `pulumi:"fullKey"`
	// The human-readable name for your Relay Proxy configuration.
	Name *string `pulumi:"name"`
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policies []RelayProxyConfigurationPolicy `pulumi:"policies"`
}

type RelayProxyConfigurationState struct {
	// The last 4 characters of the Relay Proxy configuration's unique key.
	DisplayKey pulumi.StringPtrInput
	// The Relay Proxy configuration's unique key. Because the `fullKey` is only exposed upon creation, it will not be available if the resource is imported.
	FullKey pulumi.StringPtrInput
	// The human-readable name for your Relay Proxy configuration.
	Name pulumi.StringPtrInput
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policies RelayProxyConfigurationPolicyArrayInput
}

func (RelayProxyConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*relayProxyConfigurationState)(nil)).Elem()
}

type relayProxyConfigurationArgs struct {
	// The human-readable name for your Relay Proxy configuration.
	Name *string `pulumi:"name"`
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policies []RelayProxyConfigurationPolicy `pulumi:"policies"`
}

// The set of arguments for constructing a RelayProxyConfiguration resource.
type RelayProxyConfigurationArgs struct {
	// The human-readable name for your Relay Proxy configuration.
	Name pulumi.StringPtrInput
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policies RelayProxyConfigurationPolicyArrayInput
}

func (RelayProxyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*relayProxyConfigurationArgs)(nil)).Elem()
}

type RelayProxyConfigurationInput interface {
	pulumi.Input

	ToRelayProxyConfigurationOutput() RelayProxyConfigurationOutput
	ToRelayProxyConfigurationOutputWithContext(ctx context.Context) RelayProxyConfigurationOutput
}

func (*RelayProxyConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayProxyConfiguration)(nil)).Elem()
}

func (i *RelayProxyConfiguration) ToRelayProxyConfigurationOutput() RelayProxyConfigurationOutput {
	return i.ToRelayProxyConfigurationOutputWithContext(context.Background())
}

func (i *RelayProxyConfiguration) ToRelayProxyConfigurationOutputWithContext(ctx context.Context) RelayProxyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayProxyConfigurationOutput)
}

// RelayProxyConfigurationArrayInput is an input type that accepts RelayProxyConfigurationArray and RelayProxyConfigurationArrayOutput values.
// You can construct a concrete instance of `RelayProxyConfigurationArrayInput` via:
//
//	RelayProxyConfigurationArray{ RelayProxyConfigurationArgs{...} }
type RelayProxyConfigurationArrayInput interface {
	pulumi.Input

	ToRelayProxyConfigurationArrayOutput() RelayProxyConfigurationArrayOutput
	ToRelayProxyConfigurationArrayOutputWithContext(context.Context) RelayProxyConfigurationArrayOutput
}

type RelayProxyConfigurationArray []RelayProxyConfigurationInput

func (RelayProxyConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RelayProxyConfiguration)(nil)).Elem()
}

func (i RelayProxyConfigurationArray) ToRelayProxyConfigurationArrayOutput() RelayProxyConfigurationArrayOutput {
	return i.ToRelayProxyConfigurationArrayOutputWithContext(context.Background())
}

func (i RelayProxyConfigurationArray) ToRelayProxyConfigurationArrayOutputWithContext(ctx context.Context) RelayProxyConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayProxyConfigurationArrayOutput)
}

// RelayProxyConfigurationMapInput is an input type that accepts RelayProxyConfigurationMap and RelayProxyConfigurationMapOutput values.
// You can construct a concrete instance of `RelayProxyConfigurationMapInput` via:
//
//	RelayProxyConfigurationMap{ "key": RelayProxyConfigurationArgs{...} }
type RelayProxyConfigurationMapInput interface {
	pulumi.Input

	ToRelayProxyConfigurationMapOutput() RelayProxyConfigurationMapOutput
	ToRelayProxyConfigurationMapOutputWithContext(context.Context) RelayProxyConfigurationMapOutput
}

type RelayProxyConfigurationMap map[string]RelayProxyConfigurationInput

func (RelayProxyConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RelayProxyConfiguration)(nil)).Elem()
}

func (i RelayProxyConfigurationMap) ToRelayProxyConfigurationMapOutput() RelayProxyConfigurationMapOutput {
	return i.ToRelayProxyConfigurationMapOutputWithContext(context.Background())
}

func (i RelayProxyConfigurationMap) ToRelayProxyConfigurationMapOutputWithContext(ctx context.Context) RelayProxyConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayProxyConfigurationMapOutput)
}

type RelayProxyConfigurationOutput struct{ *pulumi.OutputState }

func (RelayProxyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayProxyConfiguration)(nil)).Elem()
}

func (o RelayProxyConfigurationOutput) ToRelayProxyConfigurationOutput() RelayProxyConfigurationOutput {
	return o
}

func (o RelayProxyConfigurationOutput) ToRelayProxyConfigurationOutputWithContext(ctx context.Context) RelayProxyConfigurationOutput {
	return o
}

// The last 4 characters of the Relay Proxy configuration's unique key.
func (o RelayProxyConfigurationOutput) DisplayKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RelayProxyConfiguration) pulumi.StringOutput { return v.DisplayKey }).(pulumi.StringOutput)
}

// The Relay Proxy configuration's unique key. Because the `fullKey` is only exposed upon creation, it will not be available if the resource is imported.
func (o RelayProxyConfigurationOutput) FullKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RelayProxyConfiguration) pulumi.StringOutput { return v.FullKey }).(pulumi.StringOutput)
}

// The human-readable name for your Relay Proxy configuration.
func (o RelayProxyConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RelayProxyConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
func (o RelayProxyConfigurationOutput) Policies() RelayProxyConfigurationPolicyArrayOutput {
	return o.ApplyT(func(v *RelayProxyConfiguration) RelayProxyConfigurationPolicyArrayOutput { return v.Policies }).(RelayProxyConfigurationPolicyArrayOutput)
}

type RelayProxyConfigurationArrayOutput struct{ *pulumi.OutputState }

func (RelayProxyConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RelayProxyConfiguration)(nil)).Elem()
}

func (o RelayProxyConfigurationArrayOutput) ToRelayProxyConfigurationArrayOutput() RelayProxyConfigurationArrayOutput {
	return o
}

func (o RelayProxyConfigurationArrayOutput) ToRelayProxyConfigurationArrayOutputWithContext(ctx context.Context) RelayProxyConfigurationArrayOutput {
	return o
}

func (o RelayProxyConfigurationArrayOutput) Index(i pulumi.IntInput) RelayProxyConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RelayProxyConfiguration {
		return vs[0].([]*RelayProxyConfiguration)[vs[1].(int)]
	}).(RelayProxyConfigurationOutput)
}

type RelayProxyConfigurationMapOutput struct{ *pulumi.OutputState }

func (RelayProxyConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RelayProxyConfiguration)(nil)).Elem()
}

func (o RelayProxyConfigurationMapOutput) ToRelayProxyConfigurationMapOutput() RelayProxyConfigurationMapOutput {
	return o
}

func (o RelayProxyConfigurationMapOutput) ToRelayProxyConfigurationMapOutputWithContext(ctx context.Context) RelayProxyConfigurationMapOutput {
	return o
}

func (o RelayProxyConfigurationMapOutput) MapIndex(k pulumi.StringInput) RelayProxyConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RelayProxyConfiguration {
		return vs[0].(map[string]*RelayProxyConfiguration)[vs[1].(string)]
	}).(RelayProxyConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RelayProxyConfigurationInput)(nil)).Elem(), &RelayProxyConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelayProxyConfigurationArrayInput)(nil)).Elem(), RelayProxyConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelayProxyConfigurationMapInput)(nil)).Elem(), RelayProxyConfigurationMap{})
	pulumi.RegisterOutputType(RelayProxyConfigurationOutput{})
	pulumi.RegisterOutputType(RelayProxyConfigurationArrayOutput{})
	pulumi.RegisterOutputType(RelayProxyConfigurationMapOutput{})
}
