// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a LaunchDarkly feature flag data source.
//
// This data source allows you to retrieve feature flag information from your LaunchDarkly organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := launchdarkly.LookupFeatureFlag(ctx, &launchdarkly.LookupFeatureFlagArgs{
//				Key:        "example-flag",
//				ProjectKey: "example-project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFeatureFlag(ctx *pulumi.Context, args *LookupFeatureFlagArgs, opts ...pulumi.InvokeOption) (*LookupFeatureFlagResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFeatureFlagResult
	err := ctx.Invoke("launchdarkly:index/getFeatureFlag:getFeatureFlag", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFeatureFlag.
type LookupFeatureFlagArgs struct {
	// The unique feature flag key that references the flag in your application code.
	Key          string  `pulumi:"key"`
	MaintainerId *string `pulumi:"maintainerId"`
	// The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
	MaintainerTeamKey *string `pulumi:"maintainerTeamKey"`
	// The feature flag's project key.
	ProjectKey string `pulumi:"projectKey"`
}

// A collection of values returned by getFeatureFlag.
type LookupFeatureFlagResult struct {
	// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	Archived                 bool                                   `pulumi:"archived"`
	ClientSideAvailabilities []GetFeatureFlagClientSideAvailability `pulumi:"clientSideAvailabilities"`
	// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
	CustomProperties []GetFeatureFlagCustomProperty `pulumi:"customProperties"`
	// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
	Defaults []GetFeatureFlagDefault `pulumi:"defaults"`
	// The feature flag's description.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `includeInSnippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
	//
	// Deprecated: 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.
	IncludeInSnippet bool `pulumi:"includeInSnippet"`
	// The unique feature flag key that references the flag in your application code.
	Key          string `pulumi:"key"`
	MaintainerId string `pulumi:"maintainerId"`
	// The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
	MaintainerTeamKey string `pulumi:"maintainerTeamKey"`
	// The feature flag's human-readable name
	Name string `pulumi:"name"`
	// The feature flag's project key.
	ProjectKey string `pulumi:"projectKey"`
	// Tags associated with your resource.
	Tags []string `pulumi:"tags"`
	// Specifies whether the flag is a temporary flag.
	Temporary bool `pulumi:"temporary"`
	// The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
	VariationType string `pulumi:"variationType"`
	// An array of possible variations for the flag
	Variations []GetFeatureFlagVariation `pulumi:"variations"`
}

func LookupFeatureFlagOutput(ctx *pulumi.Context, args LookupFeatureFlagOutputArgs, opts ...pulumi.InvokeOption) LookupFeatureFlagResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFeatureFlagResultOutput, error) {
			args := v.(LookupFeatureFlagArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("launchdarkly:index/getFeatureFlag:getFeatureFlag", args, LookupFeatureFlagResultOutput{}, options).(LookupFeatureFlagResultOutput), nil
		}).(LookupFeatureFlagResultOutput)
}

// A collection of arguments for invoking getFeatureFlag.
type LookupFeatureFlagOutputArgs struct {
	// The unique feature flag key that references the flag in your application code.
	Key          pulumi.StringInput    `pulumi:"key"`
	MaintainerId pulumi.StringPtrInput `pulumi:"maintainerId"`
	// The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
	MaintainerTeamKey pulumi.StringPtrInput `pulumi:"maintainerTeamKey"`
	// The feature flag's project key.
	ProjectKey pulumi.StringInput `pulumi:"projectKey"`
}

func (LookupFeatureFlagOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureFlagArgs)(nil)).Elem()
}

// A collection of values returned by getFeatureFlag.
type LookupFeatureFlagResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureFlagResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureFlagResult)(nil)).Elem()
}

func (o LookupFeatureFlagResultOutput) ToLookupFeatureFlagResultOutput() LookupFeatureFlagResultOutput {
	return o
}

func (o LookupFeatureFlagResultOutput) ToLookupFeatureFlagResultOutputWithContext(ctx context.Context) LookupFeatureFlagResultOutput {
	return o
}

// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
func (o LookupFeatureFlagResultOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) bool { return v.Archived }).(pulumi.BoolOutput)
}

func (o LookupFeatureFlagResultOutput) ClientSideAvailabilities() GetFeatureFlagClientSideAvailabilityArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) []GetFeatureFlagClientSideAvailability {
		return v.ClientSideAvailabilities
	}).(GetFeatureFlagClientSideAvailabilityArrayOutput)
}

// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
func (o LookupFeatureFlagResultOutput) CustomProperties() GetFeatureFlagCustomPropertyArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) []GetFeatureFlagCustomProperty { return v.CustomProperties }).(GetFeatureFlagCustomPropertyArrayOutput)
}

// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
func (o LookupFeatureFlagResultOutput) Defaults() GetFeatureFlagDefaultArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) []GetFeatureFlagDefault { return v.Defaults }).(GetFeatureFlagDefaultArrayOutput)
}

// The feature flag's description.
func (o LookupFeatureFlagResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFeatureFlagResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `includeInSnippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
//
// Deprecated: 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.
func (o LookupFeatureFlagResultOutput) IncludeInSnippet() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) bool { return v.IncludeInSnippet }).(pulumi.BoolOutput)
}

// The unique feature flag key that references the flag in your application code.
func (o LookupFeatureFlagResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o LookupFeatureFlagResultOutput) MaintainerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.MaintainerId }).(pulumi.StringOutput)
}

// The key of the associated team that maintains this feature flag. `maintainerId` cannot be set if `maintainerTeamKey` is set
func (o LookupFeatureFlagResultOutput) MaintainerTeamKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.MaintainerTeamKey }).(pulumi.StringOutput)
}

// The feature flag's human-readable name
func (o LookupFeatureFlagResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.Name }).(pulumi.StringOutput)
}

// The feature flag's project key.
func (o LookupFeatureFlagResultOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.ProjectKey }).(pulumi.StringOutput)
}

// Tags associated with your resource.
func (o LookupFeatureFlagResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Specifies whether the flag is a temporary flag.
func (o LookupFeatureFlagResultOutput) Temporary() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) bool { return v.Temporary }).(pulumi.BoolOutput)
}

// The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
func (o LookupFeatureFlagResultOutput) VariationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) string { return v.VariationType }).(pulumi.StringOutput)
}

// An array of possible variations for the flag
func (o LookupFeatureFlagResultOutput) Variations() GetFeatureFlagVariationArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagResult) []GetFeatureFlagVariation { return v.Variations }).(GetFeatureFlagVariationArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureFlagResultOutput{})
}
