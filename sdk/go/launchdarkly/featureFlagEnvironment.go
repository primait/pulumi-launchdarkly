// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// This example shows the use of prerequisites, targets, context targets, rules, and fallthrough for a feature flag environment
//			_, err := launchdarkly.NewFeatureFlagEnvironment(ctx, "number_ff_env", &launchdarkly.FeatureFlagEnvironmentArgs{
//				FlagId: pulumi.Any(number.Id),
//				EnvKey: pulumi.Any(staging.Key),
//				On:     pulumi.Bool(true),
//				Prerequisites: launchdarkly.FeatureFlagEnvironmentPrerequisiteArray{
//					&launchdarkly.FeatureFlagEnvironmentPrerequisiteArgs{
//						FlagKey:   pulumi.Any(basic.Key),
//						Variation: pulumi.Int(0),
//					},
//				},
//				Targets: launchdarkly.FeatureFlagEnvironmentTargetArray{
//					&launchdarkly.FeatureFlagEnvironmentTargetArgs{
//						Values: pulumi.StringArray{
//							pulumi.String("user0"),
//						},
//						Variation: pulumi.Int(0),
//					},
//					&launchdarkly.FeatureFlagEnvironmentTargetArgs{
//						Values: pulumi.StringArray{
//							pulumi.String("user1"),
//							pulumi.String("user2"),
//						},
//						Variation: pulumi.Int(1),
//					},
//				},
//				ContextTargets: launchdarkly.FeatureFlagEnvironmentContextTargetArray{
//					&launchdarkly.FeatureFlagEnvironmentContextTargetArgs{
//						Values: pulumi.StringArray{
//							pulumi.String("accountX"),
//						},
//						Variation:   pulumi.Int(1),
//						ContextKind: pulumi.String("account"),
//					},
//				},
//				Rules: launchdarkly.FeatureFlagEnvironmentRuleArray{
//					&launchdarkly.FeatureFlagEnvironmentRuleArgs{
//						Description: pulumi.String("example targeting rule with two clauses"),
//						Clauses: launchdarkly.FeatureFlagEnvironmentRuleClauseArray{
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("country"),
//								Op:        pulumi.String("startsWith"),
//								Values: pulumi.StringArray{
//									pulumi.String("aus"),
//									pulumi.String("de"),
//									pulumi.String("united"),
//								},
//								Negate: pulumi.Bool(false),
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("segmentMatch"),
//								Op:        pulumi.String("segmentMatch"),
//								Values: pulumi.StringArray{
//									example.Key,
//								},
//								Negate: pulumi.Bool(false),
//							},
//						},
//						Variation: pulumi.Int(0),
//					},
//				},
//				Fallthrough: &launchdarkly.FeatureFlagEnvironmentFallthroughArgs{
//					RolloutWeights: pulumi.IntArray{
//						pulumi.Int(60000),
//						pulumi.Int(40000),
//						pulumi.Int(0),
//					},
//					ContextKind: pulumi.String("account"),
//					BucketBy:    pulumi.String("accountId"),
//				},
//				OffVariation: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			// This example shows the minimum configuration required to create a feature flag environment
//			_, err = launchdarkly.NewFeatureFlagEnvironment(ctx, "basic_flag_environment", &launchdarkly.FeatureFlagEnvironmentArgs{
//				FlagId: pulumi.Any(basicFlag.Id),
//				EnvKey: pulumi.String("development"),
//				On:     pulumi.Bool(true),
//				Fallthrough: &launchdarkly.FeatureFlagEnvironmentFallthroughArgs{
//					Variation: pulumi.Int(1),
//				},
//				OffVariation: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			// This example shows a feature flag environment with a targeting rule that uses every clause operator
//			_, err = launchdarkly.NewFeatureFlagEnvironment(ctx, "big_flag_environment", &launchdarkly.FeatureFlagEnvironmentArgs{
//				FlagId: pulumi.Any(bigFlag.Id),
//				EnvKey: pulumi.String("development"),
//				On:     pulumi.Bool(true),
//				Rules: launchdarkly.FeatureFlagEnvironmentRuleArray{
//					&launchdarkly.FeatureFlagEnvironmentRuleArgs{
//						Description: pulumi.String("Example targeting rule with every clause operator"),
//						Clauses: launchdarkly.FeatureFlagEnvironmentRuleClauseArray{
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("username"),
//								Op:        pulumi.String("in"),
//								Values: pulumi.StringArray{
//									pulumi.String("henrietta powell"),
//									pulumi.String("wally waterbear"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("username"),
//								Op:        pulumi.String("endsWith"),
//								Values: pulumi.StringArray{
//									pulumi.String("powell"),
//									pulumi.String("waterbear"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("username"),
//								Op:        pulumi.String("startsWith"),
//								Values: pulumi.StringArray{
//									pulumi.String("henrietta"),
//									pulumi.String("wally"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("username"),
//								Op:        pulumi.String("matches"),
//								Values: pulumi.StringArray{
//									pulumi.String("henr*"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("username"),
//								Op:        pulumi.String("contains"),
//								Values: pulumi.StringArray{
//									pulumi.String("water"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("pageVisits"),
//								Op:        pulumi.String("lessThan"),
//								Values: pulumi.StringArray{
//									pulumi.String("100"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("pageVisits"),
//								Op:        pulumi.String("lessThanOrEqual"),
//								Values: pulumi.StringArray{
//									pulumi.String("100"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("pageVisits"),
//								Op:        pulumi.String("greaterThan"),
//								Values: pulumi.StringArray{
//									pulumi.String("100"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("pageVisits"),
//								Op:        pulumi.String("greaterThanOrEqual"),
//								Values: pulumi.StringArray{
//									pulumi.String("100"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("creationDate"),
//								Op:        pulumi.String("before"),
//								Values: pulumi.StringArray{
//									pulumi.String("2024-05-03T15:57:30Z"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("creationDate"),
//								Op:        pulumi.String("after"),
//								Values: pulumi.StringArray{
//									pulumi.String("2024-05-03T15:57:30Z"),
//								},
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("version"),
//								Op:        pulumi.String("semVerEqual"),
//								Values: pulumi.StringArray{
//									pulumi.String("1.0.0"),
//									pulumi.String("1.0.1"),
//								},
//								ContextKind: pulumi.String("application"),
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("version"),
//								Op:        pulumi.String("semVerLessThan"),
//								Values: pulumi.StringArray{
//									pulumi.String("1.0.0"),
//								},
//								ContextKind: pulumi.String("application"),
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("version"),
//								Op:        pulumi.String("semVerGreaterThan"),
//								Values: pulumi.StringArray{
//									pulumi.String("1.0.0"),
//								},
//								ContextKind: pulumi.String("application"),
//							},
//							&launchdarkly.FeatureFlagEnvironmentRuleClauseArgs{
//								Attribute: pulumi.String("context"),
//								Op:        pulumi.String("segmentMatch"),
//								Values: pulumi.StringArray{
//									pulumi.String("test-segment"),
//								},
//							},
//						},
//						RolloutWeights: pulumi.IntArray{
//							pulumi.Int(40000),
//							pulumi.Int(60000),
//						},
//						BucketBy:    pulumi.String("country"),
//						ContextKind: pulumi.String("account"),
//					},
//				},
//				Fallthrough: &launchdarkly.FeatureFlagEnvironmentFallthroughArgs{
//					Variation: pulumi.Int(1),
//				},
//				OffVariation: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LaunchDarkly feature flag environments can be imported using the resource's ID in the form `project_key/env_key/flag_key`
//
// ```sh
// $ pulumi import launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment example example-project/example-env/example-flag-key
// ```
type FeatureFlagEnvironment struct {
	pulumi.CustomResourceState

	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets FeatureFlagEnvironmentContextTargetArrayOutput `pulumi:"contextTargets"`
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey pulumi.StringOutput `pulumi:"envKey"`
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough FeatureFlagEnvironmentFallthroughOutput `pulumi:"fallthrough"`
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagId pulumi.StringOutput `pulumi:"flagId"`
	// The index of the variation to serve if targeting is disabled.
	OffVariation pulumi.IntOutput `pulumi:"offVariation"`
	// Whether targeting is enabled. Defaults to `false` if not set.
	On pulumi.BoolPtrOutput `pulumi:"on"`
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites FeatureFlagEnvironmentPrerequisiteArrayOutput `pulumi:"prerequisites"`
	// List of logical targeting rules.
	Rules FeatureFlagEnvironmentRuleArrayOutput `pulumi:"rules"`
	// Set of nested blocks describing the individual user targets for each variation.
	Targets FeatureFlagEnvironmentTargetArrayOutput `pulumi:"targets"`
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents pulumi.BoolPtrOutput `pulumi:"trackEvents"`
}

// NewFeatureFlagEnvironment registers a new resource with the given unique name, arguments, and options.
func NewFeatureFlagEnvironment(ctx *pulumi.Context,
	name string, args *FeatureFlagEnvironmentArgs, opts ...pulumi.ResourceOption) (*FeatureFlagEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvKey == nil {
		return nil, errors.New("invalid value for required argument 'EnvKey'")
	}
	if args.Fallthrough == nil {
		return nil, errors.New("invalid value for required argument 'Fallthrough'")
	}
	if args.FlagId == nil {
		return nil, errors.New("invalid value for required argument 'FlagId'")
	}
	if args.OffVariation == nil {
		return nil, errors.New("invalid value for required argument 'OffVariation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureFlagEnvironment
	err := ctx.RegisterResource("launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureFlagEnvironment gets an existing FeatureFlagEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureFlagEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureFlagEnvironmentState, opts ...pulumi.ResourceOption) (*FeatureFlagEnvironment, error) {
	var resource FeatureFlagEnvironment
	err := ctx.ReadResource("launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureFlagEnvironment resources.
type featureFlagEnvironmentState struct {
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets []FeatureFlagEnvironmentContextTarget `pulumi:"contextTargets"`
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey *string `pulumi:"envKey"`
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough *FeatureFlagEnvironmentFallthrough `pulumi:"fallthrough"`
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagId *string `pulumi:"flagId"`
	// The index of the variation to serve if targeting is disabled.
	OffVariation *int `pulumi:"offVariation"`
	// Whether targeting is enabled. Defaults to `false` if not set.
	On *bool `pulumi:"on"`
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites []FeatureFlagEnvironmentPrerequisite `pulumi:"prerequisites"`
	// List of logical targeting rules.
	Rules []FeatureFlagEnvironmentRule `pulumi:"rules"`
	// Set of nested blocks describing the individual user targets for each variation.
	Targets []FeatureFlagEnvironmentTarget `pulumi:"targets"`
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents *bool `pulumi:"trackEvents"`
}

type FeatureFlagEnvironmentState struct {
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets FeatureFlagEnvironmentContextTargetArrayInput
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey pulumi.StringPtrInput
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough FeatureFlagEnvironmentFallthroughPtrInput
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagId pulumi.StringPtrInput
	// The index of the variation to serve if targeting is disabled.
	OffVariation pulumi.IntPtrInput
	// Whether targeting is enabled. Defaults to `false` if not set.
	On pulumi.BoolPtrInput
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites FeatureFlagEnvironmentPrerequisiteArrayInput
	// List of logical targeting rules.
	Rules FeatureFlagEnvironmentRuleArrayInput
	// Set of nested blocks describing the individual user targets for each variation.
	Targets FeatureFlagEnvironmentTargetArrayInput
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents pulumi.BoolPtrInput
}

func (FeatureFlagEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureFlagEnvironmentState)(nil)).Elem()
}

type featureFlagEnvironmentArgs struct {
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets []FeatureFlagEnvironmentContextTarget `pulumi:"contextTargets"`
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey string `pulumi:"envKey"`
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough FeatureFlagEnvironmentFallthrough `pulumi:"fallthrough"`
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagId string `pulumi:"flagId"`
	// The index of the variation to serve if targeting is disabled.
	OffVariation int `pulumi:"offVariation"`
	// Whether targeting is enabled. Defaults to `false` if not set.
	On *bool `pulumi:"on"`
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites []FeatureFlagEnvironmentPrerequisite `pulumi:"prerequisites"`
	// List of logical targeting rules.
	Rules []FeatureFlagEnvironmentRule `pulumi:"rules"`
	// Set of nested blocks describing the individual user targets for each variation.
	Targets []FeatureFlagEnvironmentTarget `pulumi:"targets"`
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents *bool `pulumi:"trackEvents"`
}

// The set of arguments for constructing a FeatureFlagEnvironment resource.
type FeatureFlagEnvironmentArgs struct {
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets FeatureFlagEnvironmentContextTargetArrayInput
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey pulumi.StringInput
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough FeatureFlagEnvironmentFallthroughInput
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagId pulumi.StringInput
	// The index of the variation to serve if targeting is disabled.
	OffVariation pulumi.IntInput
	// Whether targeting is enabled. Defaults to `false` if not set.
	On pulumi.BoolPtrInput
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites FeatureFlagEnvironmentPrerequisiteArrayInput
	// List of logical targeting rules.
	Rules FeatureFlagEnvironmentRuleArrayInput
	// Set of nested blocks describing the individual user targets for each variation.
	Targets FeatureFlagEnvironmentTargetArrayInput
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents pulumi.BoolPtrInput
}

func (FeatureFlagEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureFlagEnvironmentArgs)(nil)).Elem()
}

type FeatureFlagEnvironmentInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentOutput() FeatureFlagEnvironmentOutput
	ToFeatureFlagEnvironmentOutputWithContext(ctx context.Context) FeatureFlagEnvironmentOutput
}

func (*FeatureFlagEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagEnvironment)(nil)).Elem()
}

func (i *FeatureFlagEnvironment) ToFeatureFlagEnvironmentOutput() FeatureFlagEnvironmentOutput {
	return i.ToFeatureFlagEnvironmentOutputWithContext(context.Background())
}

func (i *FeatureFlagEnvironment) ToFeatureFlagEnvironmentOutputWithContext(ctx context.Context) FeatureFlagEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentOutput)
}

// FeatureFlagEnvironmentArrayInput is an input type that accepts FeatureFlagEnvironmentArray and FeatureFlagEnvironmentArrayOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentArrayInput` via:
//
//	FeatureFlagEnvironmentArray{ FeatureFlagEnvironmentArgs{...} }
type FeatureFlagEnvironmentArrayInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentArrayOutput() FeatureFlagEnvironmentArrayOutput
	ToFeatureFlagEnvironmentArrayOutputWithContext(context.Context) FeatureFlagEnvironmentArrayOutput
}

type FeatureFlagEnvironmentArray []FeatureFlagEnvironmentInput

func (FeatureFlagEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureFlagEnvironment)(nil)).Elem()
}

func (i FeatureFlagEnvironmentArray) ToFeatureFlagEnvironmentArrayOutput() FeatureFlagEnvironmentArrayOutput {
	return i.ToFeatureFlagEnvironmentArrayOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentArray) ToFeatureFlagEnvironmentArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentArrayOutput)
}

// FeatureFlagEnvironmentMapInput is an input type that accepts FeatureFlagEnvironmentMap and FeatureFlagEnvironmentMapOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentMapInput` via:
//
//	FeatureFlagEnvironmentMap{ "key": FeatureFlagEnvironmentArgs{...} }
type FeatureFlagEnvironmentMapInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentMapOutput() FeatureFlagEnvironmentMapOutput
	ToFeatureFlagEnvironmentMapOutputWithContext(context.Context) FeatureFlagEnvironmentMapOutput
}

type FeatureFlagEnvironmentMap map[string]FeatureFlagEnvironmentInput

func (FeatureFlagEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureFlagEnvironment)(nil)).Elem()
}

func (i FeatureFlagEnvironmentMap) ToFeatureFlagEnvironmentMapOutput() FeatureFlagEnvironmentMapOutput {
	return i.ToFeatureFlagEnvironmentMapOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentMap) ToFeatureFlagEnvironmentMapOutputWithContext(ctx context.Context) FeatureFlagEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentMapOutput)
}

type FeatureFlagEnvironmentOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagEnvironment)(nil)).Elem()
}

func (o FeatureFlagEnvironmentOutput) ToFeatureFlagEnvironmentOutput() FeatureFlagEnvironmentOutput {
	return o
}

func (o FeatureFlagEnvironmentOutput) ToFeatureFlagEnvironmentOutputWithContext(ctx context.Context) FeatureFlagEnvironmentOutput {
	return o
}

// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
func (o FeatureFlagEnvironmentOutput) ContextTargets() FeatureFlagEnvironmentContextTargetArrayOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) FeatureFlagEnvironmentContextTargetArrayOutput {
		return v.ContextTargets
	}).(FeatureFlagEnvironmentContextTargetArrayOutput)
}

// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
func (o FeatureFlagEnvironmentOutput) EnvKey() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) pulumi.StringOutput { return v.EnvKey }).(pulumi.StringOutput)
}

// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
func (o FeatureFlagEnvironmentOutput) Fallthrough() FeatureFlagEnvironmentFallthroughOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) FeatureFlagEnvironmentFallthroughOutput { return v.Fallthrough }).(FeatureFlagEnvironmentFallthroughOutput)
}

// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
func (o FeatureFlagEnvironmentOutput) FlagId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) pulumi.StringOutput { return v.FlagId }).(pulumi.StringOutput)
}

// The index of the variation to serve if targeting is disabled.
func (o FeatureFlagEnvironmentOutput) OffVariation() pulumi.IntOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) pulumi.IntOutput { return v.OffVariation }).(pulumi.IntOutput)
}

// Whether targeting is enabled. Defaults to `false` if not set.
func (o FeatureFlagEnvironmentOutput) On() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) pulumi.BoolPtrOutput { return v.On }).(pulumi.BoolPtrOutput)
}

// List of nested blocks describing prerequisite feature flags rules.
func (o FeatureFlagEnvironmentOutput) Prerequisites() FeatureFlagEnvironmentPrerequisiteArrayOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) FeatureFlagEnvironmentPrerequisiteArrayOutput { return v.Prerequisites }).(FeatureFlagEnvironmentPrerequisiteArrayOutput)
}

// List of logical targeting rules.
func (o FeatureFlagEnvironmentOutput) Rules() FeatureFlagEnvironmentRuleArrayOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) FeatureFlagEnvironmentRuleArrayOutput { return v.Rules }).(FeatureFlagEnvironmentRuleArrayOutput)
}

// Set of nested blocks describing the individual user targets for each variation.
func (o FeatureFlagEnvironmentOutput) Targets() FeatureFlagEnvironmentTargetArrayOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) FeatureFlagEnvironmentTargetArrayOutput { return v.Targets }).(FeatureFlagEnvironmentTargetArrayOutput)
}

// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
func (o FeatureFlagEnvironmentOutput) TrackEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironment) pulumi.BoolPtrOutput { return v.TrackEvents }).(pulumi.BoolPtrOutput)
}

type FeatureFlagEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureFlagEnvironment)(nil)).Elem()
}

func (o FeatureFlagEnvironmentArrayOutput) ToFeatureFlagEnvironmentArrayOutput() FeatureFlagEnvironmentArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentArrayOutput) ToFeatureFlagEnvironmentArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentArrayOutput) Index(i pulumi.IntInput) FeatureFlagEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureFlagEnvironment {
		return vs[0].([]*FeatureFlagEnvironment)[vs[1].(int)]
	}).(FeatureFlagEnvironmentOutput)
}

type FeatureFlagEnvironmentMapOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureFlagEnvironment)(nil)).Elem()
}

func (o FeatureFlagEnvironmentMapOutput) ToFeatureFlagEnvironmentMapOutput() FeatureFlagEnvironmentMapOutput {
	return o
}

func (o FeatureFlagEnvironmentMapOutput) ToFeatureFlagEnvironmentMapOutputWithContext(ctx context.Context) FeatureFlagEnvironmentMapOutput {
	return o
}

func (o FeatureFlagEnvironmentMapOutput) MapIndex(k pulumi.StringInput) FeatureFlagEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureFlagEnvironment {
		return vs[0].(map[string]*FeatureFlagEnvironment)[vs[1].(string)]
	}).(FeatureFlagEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentInput)(nil)).Elem(), &FeatureFlagEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentArrayInput)(nil)).Elem(), FeatureFlagEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentMapInput)(nil)).Elem(), FeatureFlagEnvironmentMap{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentMapOutput{})
}
