// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a LaunchDarkly environment-specific feature flag data source.
//
// This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/primait/pulumi-launchdarkly/sdk/go/launchdarkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := launchdarkly.LookupFeatureFlagEnvironment(ctx, &launchdarkly.LookupFeatureFlagEnvironmentArgs{
//				FlagId: "example-project/example-flag",
//				EnvKey: "example-env",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFeatureFlagEnvironment(ctx *pulumi.Context, args *LookupFeatureFlagEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupFeatureFlagEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFeatureFlagEnvironmentResult
	err := ctx.Invoke("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFeatureFlagEnvironment.
type LookupFeatureFlagEnvironmentArgs struct {
	// The environment key.
	EnvKey string `pulumi:"envKey"`
	// The feature flag's unique `id` in the format `project_key/flag_key`.
	FlagId string `pulumi:"flagId"`
}

// A collection of values returned by getFeatureFlagEnvironment.
type LookupFeatureFlagEnvironmentResult struct {
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets []GetFeatureFlagEnvironmentContextTarget `pulumi:"contextTargets"`
	// The environment key.
	EnvKey string `pulumi:"envKey"`
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthroughs []GetFeatureFlagEnvironmentFallthrough `pulumi:"fallthroughs"`
	// The feature flag's unique `id` in the format `project_key/flag_key`.
	FlagId string `pulumi:"flagId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The index of the variation to serve if targeting is disabled.
	OffVariation int `pulumi:"offVariation"`
	// Whether targeting is enabled. Defaults to `false` if not set.
	On bool `pulumi:"on"`
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites []GetFeatureFlagEnvironmentPrerequisite `pulumi:"prerequisites"`
	// List of logical targeting rules.
	Rules []GetFeatureFlagEnvironmentRule `pulumi:"rules"`
	// Set of nested blocks describing the individual user targets for each variation.
	Targets []GetFeatureFlagEnvironmentTarget `pulumi:"targets"`
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents bool `pulumi:"trackEvents"`
}

func LookupFeatureFlagEnvironmentOutput(ctx *pulumi.Context, args LookupFeatureFlagEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupFeatureFlagEnvironmentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFeatureFlagEnvironmentResultOutput, error) {
			args := v.(LookupFeatureFlagEnvironmentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args, LookupFeatureFlagEnvironmentResultOutput{}, options).(LookupFeatureFlagEnvironmentResultOutput), nil
		}).(LookupFeatureFlagEnvironmentResultOutput)
}

// A collection of arguments for invoking getFeatureFlagEnvironment.
type LookupFeatureFlagEnvironmentOutputArgs struct {
	// The environment key.
	EnvKey pulumi.StringInput `pulumi:"envKey"`
	// The feature flag's unique `id` in the format `project_key/flag_key`.
	FlagId pulumi.StringInput `pulumi:"flagId"`
}

func (LookupFeatureFlagEnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureFlagEnvironmentArgs)(nil)).Elem()
}

// A collection of values returned by getFeatureFlagEnvironment.
type LookupFeatureFlagEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureFlagEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureFlagEnvironmentResult)(nil)).Elem()
}

func (o LookupFeatureFlagEnvironmentResultOutput) ToLookupFeatureFlagEnvironmentResultOutput() LookupFeatureFlagEnvironmentResultOutput {
	return o
}

func (o LookupFeatureFlagEnvironmentResultOutput) ToLookupFeatureFlagEnvironmentResultOutputWithContext(ctx context.Context) LookupFeatureFlagEnvironmentResultOutput {
	return o
}

// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
func (o LookupFeatureFlagEnvironmentResultOutput) ContextTargets() GetFeatureFlagEnvironmentContextTargetArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) []GetFeatureFlagEnvironmentContextTarget {
		return v.ContextTargets
	}).(GetFeatureFlagEnvironmentContextTargetArrayOutput)
}

// The environment key.
func (o LookupFeatureFlagEnvironmentResultOutput) EnvKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) string { return v.EnvKey }).(pulumi.StringOutput)
}

// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
func (o LookupFeatureFlagEnvironmentResultOutput) Fallthroughs() GetFeatureFlagEnvironmentFallthroughArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) []GetFeatureFlagEnvironmentFallthrough {
		return v.Fallthroughs
	}).(GetFeatureFlagEnvironmentFallthroughArrayOutput)
}

// The feature flag's unique `id` in the format `project_key/flag_key`.
func (o LookupFeatureFlagEnvironmentResultOutput) FlagId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) string { return v.FlagId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFeatureFlagEnvironmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The index of the variation to serve if targeting is disabled.
func (o LookupFeatureFlagEnvironmentResultOutput) OffVariation() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) int { return v.OffVariation }).(pulumi.IntOutput)
}

// Whether targeting is enabled. Defaults to `false` if not set.
func (o LookupFeatureFlagEnvironmentResultOutput) On() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) bool { return v.On }).(pulumi.BoolOutput)
}

// List of nested blocks describing prerequisite feature flags rules.
func (o LookupFeatureFlagEnvironmentResultOutput) Prerequisites() GetFeatureFlagEnvironmentPrerequisiteArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) []GetFeatureFlagEnvironmentPrerequisite {
		return v.Prerequisites
	}).(GetFeatureFlagEnvironmentPrerequisiteArrayOutput)
}

// List of logical targeting rules.
func (o LookupFeatureFlagEnvironmentResultOutput) Rules() GetFeatureFlagEnvironmentRuleArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) []GetFeatureFlagEnvironmentRule { return v.Rules }).(GetFeatureFlagEnvironmentRuleArrayOutput)
}

// Set of nested blocks describing the individual user targets for each variation.
func (o LookupFeatureFlagEnvironmentResultOutput) Targets() GetFeatureFlagEnvironmentTargetArrayOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) []GetFeatureFlagEnvironmentTarget { return v.Targets }).(GetFeatureFlagEnvironmentTargetArrayOutput)
}

// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
func (o LookupFeatureFlagEnvironmentResultOutput) TrackEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFeatureFlagEnvironmentResult) bool { return v.TrackEvents }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureFlagEnvironmentResultOutput{})
}
