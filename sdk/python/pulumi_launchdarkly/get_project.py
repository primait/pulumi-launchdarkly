# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, client_side_availabilities=None, default_client_side_availabilities=None, id=None, key=None, name=None, tags=None):
        if client_side_availabilities and not isinstance(client_side_availabilities, list):
            raise TypeError("Expected argument 'client_side_availabilities' to be a list")
        pulumi.set(__self__, "client_side_availabilities", client_side_availabilities)
        if default_client_side_availabilities and not isinstance(default_client_side_availabilities, list):
            raise TypeError("Expected argument 'default_client_side_availabilities' to be a list")
        pulumi.set(__self__, "default_client_side_availabilities", default_client_side_availabilities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="clientSideAvailabilities")
    @_utilities.deprecated("""'client_side_availability' is now deprecated. Please migrate to 'default_client_side_availability' to maintain future compatibility.""")
    def client_side_availabilities(self) -> Sequence['outputs.GetProjectClientSideAvailabilityResult']:
        """
        A map describing which client-side SDKs can use new flags by default. Please migrate to `default_client_side_availability` to maintain future compatibility.
        """
        return pulumi.get(self, "client_side_availabilities")

    @_builtins.property
    @pulumi.getter(name="defaultClientSideAvailabilities")
    def default_client_side_availabilities(self) -> Sequence['outputs.GetProjectDefaultClientSideAvailabilityResult']:
        """
        A block describing which client-side SDKs can use new flags by default.
        """
        return pulumi.get(self, "default_client_side_availabilities")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The project's unique key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The project's name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Tags associated with your resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            client_side_availabilities=self.client_side_availabilities,
            default_client_side_availabilities=self.default_client_side_availabilities,
            id=self.id,
            key=self.key,
            name=self.name,
            tags=self.tags)


def get_project(key: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Provides a LaunchDarkly project data source.

    This data source allows you to retrieve project information from your LaunchDarkly organization.

    > **Note:** LaunchDarkly data sources do not provide access to the project's environments. If you wish to import environment configurations as data sources you must use the [`Environment` data source](https://www.terraform.io/docs/providers/launchdarkly/d/environment.html).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_project(key="example-project")
    ```


    :param _builtins.str key: The project's unique key.
    """
    __args__ = dict()
    __args__['key'] = key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('launchdarkly:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        client_side_availabilities=pulumi.get(__ret__, 'client_side_availabilities'),
        default_client_side_availabilities=pulumi.get(__ret__, 'default_client_side_availabilities'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        name=pulumi.get(__ret__, 'name'),
        tags=pulumi.get(__ret__, 'tags'))
def get_project_output(key: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectResult]:
    """
    Provides a LaunchDarkly project data source.

    This data source allows you to retrieve project information from your LaunchDarkly organization.

    > **Note:** LaunchDarkly data sources do not provide access to the project's environments. If you wish to import environment configurations as data sources you must use the [`Environment` data source](https://www.terraform.io/docs/providers/launchdarkly/d/environment.html).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_project(key="example-project")
    ```


    :param _builtins.str key: The project's unique key.
    """
    __args__ = dict()
    __args__['key'] = key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('launchdarkly:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult)
    return __ret__.apply(lambda __response__: GetProjectResult(
        client_side_availabilities=pulumi.get(__response__, 'client_side_availabilities'),
        default_client_side_availabilities=pulumi.get(__response__, 'default_client_side_availabilities'),
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        name=pulumi.get(__response__, 'name'),
        tags=pulumi.get(__response__, 'tags')))
