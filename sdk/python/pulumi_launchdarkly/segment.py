# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SegmentArgs', 'Segment']

@pulumi.input_type
class SegmentArgs:
    def __init__(__self__, *,
                 env_key: pulumi.Input[str],
                 key: pulumi.Input[str],
                 project_key: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 excluded_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]]] = None,
                 excludeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]]] = None,
                 includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unbounded: Optional[pulumi.Input[bool]] = None,
                 unbounded_context_kind: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Segment resource.
        :param pulumi.Input[str] env_key: The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[str] key: The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[str] project_key: The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[str] description: The description of the segment's purpose.
        :param pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]] excluded_contexts: List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludeds: List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]] included_contexts: List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includeds: List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[str] name: The human-friendly name for the segment.
        :param pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]] rules: List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags associated with your resource.
        :param pulumi.Input[str] unbounded_context_kind: For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        pulumi.set(__self__, "env_key", env_key)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "project_key", project_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if excluded_contexts is not None:
            pulumi.set(__self__, "excluded_contexts", excluded_contexts)
        if excludeds is not None:
            pulumi.set(__self__, "excludeds", excludeds)
        if included_contexts is not None:
            pulumi.set(__self__, "included_contexts", included_contexts)
        if includeds is not None:
            pulumi.set(__self__, "includeds", includeds)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unbounded is not None:
            pulumi.set(__self__, "unbounded", unbounded)
        if unbounded_context_kind is not None:
            pulumi.set(__self__, "unbounded_context_kind", unbounded_context_kind)

    @property
    @pulumi.getter(name="envKey")
    def env_key(self) -> pulumi.Input[str]:
        """
        The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "env_key")

    @env_key.setter
    def env_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "env_key", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the segment's purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="excludedContexts")
    def excluded_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]]]:
        """
        List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "excluded_contexts")

    @excluded_contexts.setter
    def excluded_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]]]):
        pulumi.set(self, "excluded_contexts", value)

    @property
    @pulumi.getter
    def excludeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "excludeds")

    @excludeds.setter
    def excludeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excludeds", value)

    @property
    @pulumi.getter(name="includedContexts")
    def included_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]]]:
        """
        List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "included_contexts")

    @included_contexts.setter
    def included_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]]]):
        pulumi.set(self, "included_contexts", value)

    @property
    @pulumi.getter
    def includeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "includeds")

    @includeds.setter
    def includeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includeds", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The human-friendly name for the segment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]]]:
        """
        List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags associated with your resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def unbounded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unbounded")

    @unbounded.setter
    def unbounded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unbounded", value)

    @property
    @pulumi.getter(name="unboundedContextKind")
    def unbounded_context_kind(self) -> Optional[pulumi.Input[str]]:
        """
        For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "unbounded_context_kind")

    @unbounded_context_kind.setter
    def unbounded_context_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unbounded_context_kind", value)


@pulumi.input_type
class _SegmentState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 env_key: Optional[pulumi.Input[str]] = None,
                 excluded_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]]] = None,
                 excludeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]]] = None,
                 includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unbounded: Optional[pulumi.Input[bool]] = None,
                 unbounded_context_kind: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Segment resources.
        :param pulumi.Input[int] creation_date: The segment's creation date represented as a UNIX epoch timestamp.
        :param pulumi.Input[str] description: The description of the segment's purpose.
        :param pulumi.Input[str] env_key: The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]] excluded_contexts: List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludeds: List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]] included_contexts: List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includeds: List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[str] key: The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[str] name: The human-friendly name for the segment.
        :param pulumi.Input[str] project_key: The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]] rules: List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags associated with your resource.
        :param pulumi.Input[str] unbounded_context_kind: For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if env_key is not None:
            pulumi.set(__self__, "env_key", env_key)
        if excluded_contexts is not None:
            pulumi.set(__self__, "excluded_contexts", excluded_contexts)
        if excludeds is not None:
            pulumi.set(__self__, "excludeds", excludeds)
        if included_contexts is not None:
            pulumi.set(__self__, "included_contexts", included_contexts)
        if includeds is not None:
            pulumi.set(__self__, "includeds", includeds)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unbounded is not None:
            pulumi.set(__self__, "unbounded", unbounded)
        if unbounded_context_kind is not None:
            pulumi.set(__self__, "unbounded_context_kind", unbounded_context_kind)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[int]]:
        """
        The segment's creation date represented as a UNIX epoch timestamp.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the segment's purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="envKey")
    def env_key(self) -> Optional[pulumi.Input[str]]:
        """
        The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "env_key")

    @env_key.setter
    def env_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_key", value)

    @property
    @pulumi.getter(name="excludedContexts")
    def excluded_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]]]:
        """
        List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "excluded_contexts")

    @excluded_contexts.setter
    def excluded_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentExcludedContextArgs']]]]):
        pulumi.set(self, "excluded_contexts", value)

    @property
    @pulumi.getter
    def excludeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "excludeds")

    @excludeds.setter
    def excludeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excludeds", value)

    @property
    @pulumi.getter(name="includedContexts")
    def included_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]]]:
        """
        List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "included_contexts")

    @included_contexts.setter
    def included_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentIncludedContextArgs']]]]):
        pulumi.set(self, "included_contexts", value)

    @property
    @pulumi.getter
    def includeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "includeds")

    @includeds.setter
    def includeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includeds", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The human-friendly name for the segment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[str]]:
        """
        The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]]]:
        """
        List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags associated with your resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def unbounded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unbounded")

    @unbounded.setter
    def unbounded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unbounded", value)

    @property
    @pulumi.getter(name="unboundedContextKind")
    def unbounded_context_kind(self) -> Optional[pulumi.Input[str]]:
        """
        For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "unbounded_context_kind")

    @unbounded_context_kind.setter
    def unbounded_context_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unbounded_context_kind", value)


class Segment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 env_key: Optional[pulumi.Input[str]] = None,
                 excluded_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentExcludedContextArgs', 'SegmentExcludedContextArgsDict']]]]] = None,
                 excludeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentIncludedContextArgs', 'SegmentIncludedContextArgsDict']]]]] = None,
                 includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentRuleArgs', 'SegmentRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unbounded: Optional[pulumi.Input[bool]] = None,
                 unbounded_context_kind: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a LaunchDarkly segment resource.

        This resource allows you to create and manage segments within your LaunchDarkly organization.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_launchdarkly as launchdarkly

        # This example shows the use of tags, targets, context targets, and rules for a segment
        example = launchdarkly.Segment("example",
            key="example-segment-key",
            project_key=example_launchdarkly_project["key"],
            env_key=example_launchdarkly_environment["key"],
            name="example segment",
            description="This segment is managed by Terraform",
            tags=[
                "segment-tag-1",
                "segment-tag-2",
            ],
            includeds=[
                "user1",
                "user2",
            ],
            excludeds=[
                "user3",
                "user4",
            ],
            included_contexts=[{
                "values": [
                    "account1",
                    "account2",
                ],
                "context_kind": "account",
            }],
            rules=[{
                "clauses": [{
                    "attribute": "country",
                    "op": "startsWith",
                    "values": [
                        "en",
                        "de",
                        "un",
                    ],
                    "negate": False,
                    "context_kind": "location-data",
                }],
            }])
        # This example shows a segment configured to have an unbounded number of individual targets
        big_example = launchdarkly.Segment("big-example",
            key="example-big-segment-key",
            project_key=example_launchdarkly_project["key"],
            env_key=example_launchdarkly_environment["key"],
            name="example big segment",
            description="This big segment is managed by Terraform",
            tags=[
                "segment-tag-1",
                "segment-tag-2",
            ],
            unbounded=True,
            unbounded_context_kind="user")
        # This example shows a segment with a targeting rule that uses all clause operators
        segment_with_all_clause_operators = launchdarkly.Segment("segment_with_all_clause_operators",
            name="Segment with all clause operators",
            key="segment-operators",
            project_key="projectx",
            env_key="development",
            rules=[{
                "clauses": [
                    {
                        "attribute": "username",
                        "op": "in",
                        "values": [
                            "henrietta powell",
                            "wally waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "endsWith",
                        "values": [
                            "powell",
                            "waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "startsWith",
                        "values": [
                            "henrietta",
                            "wally",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "matches",
                        "values": ["henr*"],
                    },
                    {
                        "attribute": "username",
                        "op": "contains",
                        "values": ["water"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "before",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "after",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "version",
                        "op": "semVerEqual",
                        "values": [
                            "1.0.0",
                            "1.0.1",
                        ],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerLessThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerGreaterThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "context",
                        "op": "segmentMatch",
                        "values": ["test-segment"],
                    },
                ],
            }])
        ```

        ## Import

        #LaunchDarkly segments can be imported using the segment's ID in the form `project_key/env_key/segment_key`

        ```sh
        $ pulumi import launchdarkly:index/segment:Segment example example-project/example-environment/example-segment-key
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the segment's purpose.
        :param pulumi.Input[str] env_key: The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SegmentExcludedContextArgs', 'SegmentExcludedContextArgsDict']]]] excluded_contexts: List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludeds: List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SegmentIncludedContextArgs', 'SegmentIncludedContextArgsDict']]]] included_contexts: List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includeds: List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[str] key: The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[str] name: The human-friendly name for the segment.
        :param pulumi.Input[str] project_key: The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SegmentRuleArgs', 'SegmentRuleArgsDict']]]] rules: List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags associated with your resource.
        :param pulumi.Input[str] unbounded_context_kind: For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SegmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a LaunchDarkly segment resource.

        This resource allows you to create and manage segments within your LaunchDarkly organization.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_launchdarkly as launchdarkly

        # This example shows the use of tags, targets, context targets, and rules for a segment
        example = launchdarkly.Segment("example",
            key="example-segment-key",
            project_key=example_launchdarkly_project["key"],
            env_key=example_launchdarkly_environment["key"],
            name="example segment",
            description="This segment is managed by Terraform",
            tags=[
                "segment-tag-1",
                "segment-tag-2",
            ],
            includeds=[
                "user1",
                "user2",
            ],
            excludeds=[
                "user3",
                "user4",
            ],
            included_contexts=[{
                "values": [
                    "account1",
                    "account2",
                ],
                "context_kind": "account",
            }],
            rules=[{
                "clauses": [{
                    "attribute": "country",
                    "op": "startsWith",
                    "values": [
                        "en",
                        "de",
                        "un",
                    ],
                    "negate": False,
                    "context_kind": "location-data",
                }],
            }])
        # This example shows a segment configured to have an unbounded number of individual targets
        big_example = launchdarkly.Segment("big-example",
            key="example-big-segment-key",
            project_key=example_launchdarkly_project["key"],
            env_key=example_launchdarkly_environment["key"],
            name="example big segment",
            description="This big segment is managed by Terraform",
            tags=[
                "segment-tag-1",
                "segment-tag-2",
            ],
            unbounded=True,
            unbounded_context_kind="user")
        # This example shows a segment with a targeting rule that uses all clause operators
        segment_with_all_clause_operators = launchdarkly.Segment("segment_with_all_clause_operators",
            name="Segment with all clause operators",
            key="segment-operators",
            project_key="projectx",
            env_key="development",
            rules=[{
                "clauses": [
                    {
                        "attribute": "username",
                        "op": "in",
                        "values": [
                            "henrietta powell",
                            "wally waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "endsWith",
                        "values": [
                            "powell",
                            "waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "startsWith",
                        "values": [
                            "henrietta",
                            "wally",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "matches",
                        "values": ["henr*"],
                    },
                    {
                        "attribute": "username",
                        "op": "contains",
                        "values": ["water"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "before",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "after",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "version",
                        "op": "semVerEqual",
                        "values": [
                            "1.0.0",
                            "1.0.1",
                        ],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerLessThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerGreaterThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "context",
                        "op": "segmentMatch",
                        "values": ["test-segment"],
                    },
                ],
            }])
        ```

        ## Import

        #LaunchDarkly segments can be imported using the segment's ID in the form `project_key/env_key/segment_key`

        ```sh
        $ pulumi import launchdarkly:index/segment:Segment example example-project/example-environment/example-segment-key
        ```

        :param str resource_name: The name of the resource.
        :param SegmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SegmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 env_key: Optional[pulumi.Input[str]] = None,
                 excluded_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentExcludedContextArgs', 'SegmentExcludedContextArgsDict']]]]] = None,
                 excludeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentIncludedContextArgs', 'SegmentIncludedContextArgsDict']]]]] = None,
                 includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentRuleArgs', 'SegmentRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unbounded: Optional[pulumi.Input[bool]] = None,
                 unbounded_context_kind: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SegmentArgs.__new__(SegmentArgs)

            __props__.__dict__["description"] = description
            if env_key is None and not opts.urn:
                raise TypeError("Missing required property 'env_key'")
            __props__.__dict__["env_key"] = env_key
            __props__.__dict__["excluded_contexts"] = excluded_contexts
            __props__.__dict__["excludeds"] = excludeds
            __props__.__dict__["included_contexts"] = included_contexts
            __props__.__dict__["includeds"] = includeds
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["name"] = name
            if project_key is None and not opts.urn:
                raise TypeError("Missing required property 'project_key'")
            __props__.__dict__["project_key"] = project_key
            __props__.__dict__["rules"] = rules
            __props__.__dict__["tags"] = tags
            __props__.__dict__["unbounded"] = unbounded
            __props__.__dict__["unbounded_context_kind"] = unbounded_context_kind
            __props__.__dict__["creation_date"] = None
        super(Segment, __self__).__init__(
            'launchdarkly:index/segment:Segment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            env_key: Optional[pulumi.Input[str]] = None,
            excluded_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentExcludedContextArgs', 'SegmentExcludedContextArgsDict']]]]] = None,
            excludeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            included_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentIncludedContextArgs', 'SegmentIncludedContextArgsDict']]]]] = None,
            includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_key: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SegmentRuleArgs', 'SegmentRuleArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            unbounded: Optional[pulumi.Input[bool]] = None,
            unbounded_context_kind: Optional[pulumi.Input[str]] = None) -> 'Segment':
        """
        Get an existing Segment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] creation_date: The segment's creation date represented as a UNIX epoch timestamp.
        :param pulumi.Input[str] description: The description of the segment's purpose.
        :param pulumi.Input[str] env_key: The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SegmentExcludedContextArgs', 'SegmentExcludedContextArgsDict']]]] excluded_contexts: List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludeds: List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SegmentIncludedContextArgs', 'SegmentIncludedContextArgsDict']]]] included_contexts: List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includeds: List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[str] key: The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[str] name: The human-friendly name for the segment.
        :param pulumi.Input[str] project_key: The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SegmentRuleArgs', 'SegmentRuleArgsDict']]]] rules: List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags associated with your resource.
        :param pulumi.Input[str] unbounded_context_kind: For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SegmentState.__new__(_SegmentState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["env_key"] = env_key
        __props__.__dict__["excluded_contexts"] = excluded_contexts
        __props__.__dict__["excludeds"] = excludeds
        __props__.__dict__["included_contexts"] = included_contexts
        __props__.__dict__["includeds"] = includeds
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["project_key"] = project_key
        __props__.__dict__["rules"] = rules
        __props__.__dict__["tags"] = tags
        __props__.__dict__["unbounded"] = unbounded
        __props__.__dict__["unbounded_context_kind"] = unbounded_context_kind
        return Segment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[int]:
        """
        The segment's creation date represented as a UNIX epoch timestamp.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the segment's purpose.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="envKey")
    def env_key(self) -> pulumi.Output[str]:
        """
        The segment's environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "env_key")

    @property
    @pulumi.getter(name="excludedContexts")
    def excluded_contexts(self) -> pulumi.Output[Optional[Sequence['outputs.SegmentExcludedContext']]]:
        """
        List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "excluded_contexts")

    @property
    @pulumi.getter
    def excludeds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "excludeds")

    @property
    @pulumi.getter(name="includedContexts")
    def included_contexts(self) -> pulumi.Output[Optional[Sequence['outputs.SegmentIncludedContext']]]:
        """
        List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "included_contexts")

    @property
    @pulumi.getter
    def includeds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "includeds")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        The unique key that references the segment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The human-friendly name for the segment.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Output[str]:
        """
        The segment's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.SegmentRule']]]:
        """
        List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags associated with your resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def unbounded(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "unbounded")

    @property
    @pulumi.getter(name="unboundedContextKind")
    def unbounded_context_kind(self) -> pulumi.Output[str]:
        """
        For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "unbounded_context_kind")

