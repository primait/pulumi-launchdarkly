# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TeamRoleMappingArgs', 'TeamRoleMapping']

@pulumi.input_type
class TeamRoleMappingArgs:
    def __init__(__self__, *,
                 custom_role_keys: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 team_key: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a TeamRoleMapping resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_role_keys: List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        :param pulumi.Input[_builtins.str] team_key: The team key.
        """
        pulumi.set(__self__, "custom_role_keys", custom_role_keys)
        pulumi.set(__self__, "team_key", team_key)

    @_builtins.property
    @pulumi.getter(name="customRoleKeys")
    def custom_role_keys(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        """
        return pulumi.get(self, "custom_role_keys")

    @custom_role_keys.setter
    def custom_role_keys(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "custom_role_keys", value)

    @_builtins.property
    @pulumi.getter(name="teamKey")
    def team_key(self) -> pulumi.Input[_builtins.str]:
        """
        The team key.
        """
        return pulumi.get(self, "team_key")

    @team_key.setter
    def team_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "team_key", value)


@pulumi.input_type
class _TeamRoleMappingState:
    def __init__(__self__, *,
                 custom_role_keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 team_key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TeamRoleMapping resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_role_keys: List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        :param pulumi.Input[_builtins.str] team_key: The team key.
        """
        if custom_role_keys is not None:
            pulumi.set(__self__, "custom_role_keys", custom_role_keys)
        if team_key is not None:
            pulumi.set(__self__, "team_key", team_key)

    @_builtins.property
    @pulumi.getter(name="customRoleKeys")
    def custom_role_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        """
        return pulumi.get(self, "custom_role_keys")

    @custom_role_keys.setter
    def custom_role_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_role_keys", value)

    @_builtins.property
    @pulumi.getter(name="teamKey")
    def team_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The team key.
        """
        return pulumi.get(self, "team_key")

    @team_key.setter
    def team_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "team_key", value)


@pulumi.type_token("launchdarkly:index/teamRoleMapping:TeamRoleMapping")
class TeamRoleMapping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_role_keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 team_key: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_launchdarkly as launchdarkly

        platform_team = launchdarkly.TeamRoleMapping("platform_team",
            team_key="platform_team",
            custom_role_keys=[
                "platform",
                "nomad-administrators",
            ])
        ```

        ## Import

        A LaunchDarkly team/role mapping can be imported using the team key:

        ```sh
        $ pulumi import launchdarkly:index/teamRoleMapping:TeamRoleMapping platform_team platform_team
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_role_keys: List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        :param pulumi.Input[_builtins.str] team_key: The team key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamRoleMappingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_launchdarkly as launchdarkly

        platform_team = launchdarkly.TeamRoleMapping("platform_team",
            team_key="platform_team",
            custom_role_keys=[
                "platform",
                "nomad-administrators",
            ])
        ```

        ## Import

        A LaunchDarkly team/role mapping can be imported using the team key:

        ```sh
        $ pulumi import launchdarkly:index/teamRoleMapping:TeamRoleMapping platform_team platform_team
        ```

        :param str resource_name: The name of the resource.
        :param TeamRoleMappingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamRoleMappingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_role_keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 team_key: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamRoleMappingArgs.__new__(TeamRoleMappingArgs)

            if custom_role_keys is None and not opts.urn:
                raise TypeError("Missing required property 'custom_role_keys'")
            __props__.__dict__["custom_role_keys"] = custom_role_keys
            if team_key is None and not opts.urn:
                raise TypeError("Missing required property 'team_key'")
            __props__.__dict__["team_key"] = team_key
        super(TeamRoleMapping, __self__).__init__(
            'launchdarkly:index/teamRoleMapping:TeamRoleMapping',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_role_keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            team_key: Optional[pulumi.Input[_builtins.str]] = None) -> 'TeamRoleMapping':
        """
        Get an existing TeamRoleMapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] custom_role_keys: List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        :param pulumi.Input[_builtins.str] team_key: The team key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamRoleMappingState.__new__(_TeamRoleMappingState)

        __props__.__dict__["custom_role_keys"] = custom_role_keys
        __props__.__dict__["team_key"] = team_key
        return TeamRoleMapping(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="customRoleKeys")
    def custom_role_keys(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        """
        return pulumi.get(self, "custom_role_keys")

    @_builtins.property
    @pulumi.getter(name="teamKey")
    def team_key(self) -> pulumi.Output[_builtins.str]:
        """
        The team key.
        """
        return pulumi.get(self, "team_key")

