# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, custom_role_keys=None, description=None, id=None, key=None, maintainers=None, name=None, project_keys=None, role_attributes=None):
        if custom_role_keys and not isinstance(custom_role_keys, list):
            raise TypeError("Expected argument 'custom_role_keys' to be a list")
        pulumi.set(__self__, "custom_role_keys", custom_role_keys)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if maintainers and not isinstance(maintainers, list):
            raise TypeError("Expected argument 'maintainers' to be a list")
        pulumi.set(__self__, "maintainers", maintainers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_keys and not isinstance(project_keys, list):
            raise TypeError("Expected argument 'project_keys' to be a list")
        pulumi.set(__self__, "project_keys", project_keys)
        if role_attributes and not isinstance(role_attributes, list):
            raise TypeError("Expected argument 'role_attributes' to be a list")
        pulumi.set(__self__, "role_attributes", role_attributes)

    @property
    @pulumi.getter(name="customRoleKeys")
    def custom_role_keys(self) -> Sequence[str]:
        """
        The list of the keys of the custom roles that you have assigned to the team.
        """
        return pulumi.get(self, "custom_role_keys")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The team description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The team key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def maintainers(self) -> Sequence['outputs.GetTeamMaintainerResult']:
        """
        The list of team maintainers as [team member objects](https://www.terraform.io/providers/launchdarkly/launchdarkly/latest/docs/data-sources/team_member).
        """
        return pulumi.get(self, "maintainers")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Human-readable name for the team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectKeys")
    def project_keys(self) -> Sequence[str]:
        """
        The list of keys of the projects that the team has any write access to.
        """
        return pulumi.get(self, "project_keys")

    @property
    @pulumi.getter(name="roleAttributes")
    def role_attributes(self) -> Sequence['outputs.GetTeamRoleAttributeResult']:
        """
        A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
        """
        return pulumi.get(self, "role_attributes")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            custom_role_keys=self.custom_role_keys,
            description=self.description,
            id=self.id,
            key=self.key,
            maintainers=self.maintainers,
            name=self.name,
            project_keys=self.project_keys,
            role_attributes=self.role_attributes)


def get_team(key: Optional[str] = None,
             role_attributes: Optional[Sequence[Union['GetTeamRoleAttributeArgs', 'GetTeamRoleAttributeArgsDict']]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Provides a LaunchDarkly team data source.

    This data source allows you to retrieve team information from your LaunchDarkly organization.

    > **Note:** Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    platform_team = launchdarkly.get_team(key="platform_team")
    ```


    :param str key: The team key.
    :param Sequence[Union['GetTeamRoleAttributeArgs', 'GetTeamRoleAttributeArgsDict']] role_attributes: A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['roleAttributes'] = role_attributes
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('launchdarkly:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        custom_role_keys=pulumi.get(__ret__, 'custom_role_keys'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        maintainers=pulumi.get(__ret__, 'maintainers'),
        name=pulumi.get(__ret__, 'name'),
        project_keys=pulumi.get(__ret__, 'project_keys'),
        role_attributes=pulumi.get(__ret__, 'role_attributes'))
def get_team_output(key: Optional[pulumi.Input[str]] = None,
                    role_attributes: Optional[pulumi.Input[Optional[Sequence[Union['GetTeamRoleAttributeArgs', 'GetTeamRoleAttributeArgsDict']]]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTeamResult]:
    """
    Provides a LaunchDarkly team data source.

    This data source allows you to retrieve team information from your LaunchDarkly organization.

    > **Note:** Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    platform_team = launchdarkly.get_team(key="platform_team")
    ```


    :param str key: The team key.
    :param Sequence[Union['GetTeamRoleAttributeArgs', 'GetTeamRoleAttributeArgsDict']] role_attributes: A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['roleAttributes'] = role_attributes
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('launchdarkly:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult)
    return __ret__.apply(lambda __response__: GetTeamResult(
        custom_role_keys=pulumi.get(__response__, 'custom_role_keys'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        maintainers=pulumi.get(__response__, 'maintainers'),
        name=pulumi.get(__response__, 'name'),
        project_keys=pulumi.get(__response__, 'project_keys'),
        role_attributes=pulumi.get(__response__, 'role_attributes')))
