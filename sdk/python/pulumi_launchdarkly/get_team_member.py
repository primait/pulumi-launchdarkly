# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTeamMemberResult',
    'AwaitableGetTeamMemberResult',
    'get_team_member',
    'get_team_member_output',
]

@pulumi.output_type
class GetTeamMemberResult:
    """
    A collection of values returned by getTeamMember.
    """
    def __init__(__self__, custom_roles=None, email=None, first_name=None, id=None, last_name=None, role=None, role_attributes=None):
        if custom_roles and not isinstance(custom_roles, list):
            raise TypeError("Expected argument 'custom_roles' to be a list")
        pulumi.set(__self__, "custom_roles", custom_roles)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        pulumi.set(__self__, "last_name", last_name)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if role_attributes and not isinstance(role_attributes, list):
            raise TypeError("Expected argument 'role_attributes' to be a list")
        pulumi.set(__self__, "role_attributes", role_attributes)

    @_builtins.property
    @pulumi.getter(name="customRoles")
    def custom_roles(self) -> Sequence[_builtins.str]:
        """
        The list of custom roles keys associated with the team member. Custom roles are only available to customers on an Enterprise plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        """
        return pulumi.get(self, "custom_roles")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        The unique email address associated with the team member.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        """
        The team member's given name.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The 24 character alphanumeric ID of the team member.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        """
        The team member's family name.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        The role associated with team member. Possible roles are `owner`, `reader`, `writer`, or `admin`.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleAttributes")
    def role_attributes(self) -> Sequence['outputs.GetTeamMemberRoleAttributeResult']:
        """
        A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
        """
        return pulumi.get(self, "role_attributes")


class AwaitableGetTeamMemberResult(GetTeamMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamMemberResult(
            custom_roles=self.custom_roles,
            email=self.email,
            first_name=self.first_name,
            id=self.id,
            last_name=self.last_name,
            role=self.role,
            role_attributes=self.role_attributes)


def get_team_member(email: Optional[_builtins.str] = None,
                    role_attributes: Optional[Sequence[Union['GetTeamMemberRoleAttributeArgs', 'GetTeamMemberRoleAttributeArgsDict']]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamMemberResult:
    """
    Provides a LaunchDarkly team member data source.

    This data source allows you to retrieve team member information from your LaunchDarkly organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_team_member(email="example@example.com")
    ```


    :param _builtins.str email: The unique email address associated with the team member.
    :param Sequence[Union['GetTeamMemberRoleAttributeArgs', 'GetTeamMemberRoleAttributeArgsDict']] role_attributes: A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['roleAttributes'] = role_attributes
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('launchdarkly:index/getTeamMember:getTeamMember', __args__, opts=opts, typ=GetTeamMemberResult).value

    return AwaitableGetTeamMemberResult(
        custom_roles=pulumi.get(__ret__, 'custom_roles'),
        email=pulumi.get(__ret__, 'email'),
        first_name=pulumi.get(__ret__, 'first_name'),
        id=pulumi.get(__ret__, 'id'),
        last_name=pulumi.get(__ret__, 'last_name'),
        role=pulumi.get(__ret__, 'role'),
        role_attributes=pulumi.get(__ret__, 'role_attributes'))
def get_team_member_output(email: Optional[pulumi.Input[_builtins.str]] = None,
                           role_attributes: Optional[pulumi.Input[Optional[Sequence[Union['GetTeamMemberRoleAttributeArgs', 'GetTeamMemberRoleAttributeArgsDict']]]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTeamMemberResult]:
    """
    Provides a LaunchDarkly team member data source.

    This data source allows you to retrieve team member information from your LaunchDarkly organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_team_member(email="example@example.com")
    ```


    :param _builtins.str email: The unique email address associated with the team member.
    :param Sequence[Union['GetTeamMemberRoleAttributeArgs', 'GetTeamMemberRoleAttributeArgsDict']] role_attributes: A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['roleAttributes'] = role_attributes
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('launchdarkly:index/getTeamMember:getTeamMember', __args__, opts=opts, typ=GetTeamMemberResult)
    return __ret__.apply(lambda __response__: GetTeamMemberResult(
        custom_roles=pulumi.get(__response__, 'custom_roles'),
        email=pulumi.get(__response__, 'email'),
        first_name=pulumi.get(__response__, 'first_name'),
        id=pulumi.get(__response__, 'id'),
        last_name=pulumi.get(__response__, 'last_name'),
        role=pulumi.get(__response__, 'role'),
        role_attributes=pulumi.get(__response__, 'role_attributes')))
