# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FeatureFlagEnvironmentArgs', 'FeatureFlagEnvironment']

@pulumi.input_type
class FeatureFlagEnvironmentArgs:
    def __init__(__self__, *,
                 env_key: pulumi.Input[_builtins.str],
                 fallthrough: pulumi.Input['FeatureFlagEnvironmentFallthroughArgs'],
                 flag_id: pulumi.Input[_builtins.str],
                 off_variation: pulumi.Input[_builtins.int],
                 context_targets: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]]] = None,
                 on: Optional[pulumi.Input[_builtins.bool]] = None,
                 prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]]] = None,
                 track_events: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a FeatureFlagEnvironment resource.
        :param pulumi.Input[_builtins.str] env_key: The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input['FeatureFlagEnvironmentFallthroughArgs'] fallthrough: Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        :param pulumi.Input[_builtins.str] flag_id: The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[_builtins.int] off_variation: The index of the variation to serve if targeting is disabled.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]] context_targets: The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        :param pulumi.Input[_builtins.bool] on: Whether targeting is enabled. Defaults to `false` if not set.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]] prerequisites: List of nested blocks describing prerequisite feature flags rules.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]] rules: List of logical targeting rules.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]] targets: Set of nested blocks describing the individual user targets for each variation.
        :param pulumi.Input[_builtins.bool] track_events: Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        pulumi.set(__self__, "env_key", env_key)
        pulumi.set(__self__, "fallthrough", fallthrough)
        pulumi.set(__self__, "flag_id", flag_id)
        pulumi.set(__self__, "off_variation", off_variation)
        if context_targets is not None:
            pulumi.set(__self__, "context_targets", context_targets)
        if on is not None:
            pulumi.set(__self__, "on", on)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if track_events is not None:
            pulumi.set(__self__, "track_events", track_events)

    @_builtins.property
    @pulumi.getter(name="envKey")
    def env_key(self) -> pulumi.Input[_builtins.str]:
        """
        The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "env_key")

    @env_key.setter
    def env_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "env_key", value)

    @_builtins.property
    @pulumi.getter
    def fallthrough(self) -> pulumi.Input['FeatureFlagEnvironmentFallthroughArgs']:
        """
        Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        """
        return pulumi.get(self, "fallthrough")

    @fallthrough.setter
    def fallthrough(self, value: pulumi.Input['FeatureFlagEnvironmentFallthroughArgs']):
        pulumi.set(self, "fallthrough", value)

    @_builtins.property
    @pulumi.getter(name="flagId")
    def flag_id(self) -> pulumi.Input[_builtins.str]:
        """
        The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "flag_id")

    @flag_id.setter
    def flag_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flag_id", value)

    @_builtins.property
    @pulumi.getter(name="offVariation")
    def off_variation(self) -> pulumi.Input[_builtins.int]:
        """
        The index of the variation to serve if targeting is disabled.
        """
        return pulumi.get(self, "off_variation")

    @off_variation.setter
    def off_variation(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "off_variation", value)

    @_builtins.property
    @pulumi.getter(name="contextTargets")
    def context_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]]]:
        """
        The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        """
        return pulumi.get(self, "context_targets")

    @context_targets.setter
    def context_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]]]):
        pulumi.set(self, "context_targets", value)

    @_builtins.property
    @pulumi.getter
    def on(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether targeting is enabled. Defaults to `false` if not set.
        """
        return pulumi.get(self, "on")

    @on.setter
    def on(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "on", value)

    @_builtins.property
    @pulumi.getter
    def prerequisites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]]]:
        """
        List of nested blocks describing prerequisite feature flags rules.
        """
        return pulumi.get(self, "prerequisites")

    @prerequisites.setter
    def prerequisites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]]]):
        pulumi.set(self, "prerequisites", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]]]:
        """
        List of logical targeting rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]]]:
        """
        Set of nested blocks describing the individual user targets for each variation.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="trackEvents")
    def track_events(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        return pulumi.get(self, "track_events")

    @track_events.setter
    def track_events(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_events", value)


@pulumi.input_type
class _FeatureFlagEnvironmentState:
    def __init__(__self__, *,
                 context_targets: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]]] = None,
                 env_key: Optional[pulumi.Input[_builtins.str]] = None,
                 fallthrough: Optional[pulumi.Input['FeatureFlagEnvironmentFallthroughArgs']] = None,
                 flag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 off_variation: Optional[pulumi.Input[_builtins.int]] = None,
                 on: Optional[pulumi.Input[_builtins.bool]] = None,
                 prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]]] = None,
                 track_events: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering FeatureFlagEnvironment resources.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]] context_targets: The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        :param pulumi.Input[_builtins.str] env_key: The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input['FeatureFlagEnvironmentFallthroughArgs'] fallthrough: Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        :param pulumi.Input[_builtins.str] flag_id: The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[_builtins.int] off_variation: The index of the variation to serve if targeting is disabled.
        :param pulumi.Input[_builtins.bool] on: Whether targeting is enabled. Defaults to `false` if not set.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]] prerequisites: List of nested blocks describing prerequisite feature flags rules.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]] rules: List of logical targeting rules.
        :param pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]] targets: Set of nested blocks describing the individual user targets for each variation.
        :param pulumi.Input[_builtins.bool] track_events: Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        if context_targets is not None:
            pulumi.set(__self__, "context_targets", context_targets)
        if env_key is not None:
            pulumi.set(__self__, "env_key", env_key)
        if fallthrough is not None:
            pulumi.set(__self__, "fallthrough", fallthrough)
        if flag_id is not None:
            pulumi.set(__self__, "flag_id", flag_id)
        if off_variation is not None:
            pulumi.set(__self__, "off_variation", off_variation)
        if on is not None:
            pulumi.set(__self__, "on", on)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if track_events is not None:
            pulumi.set(__self__, "track_events", track_events)

    @_builtins.property
    @pulumi.getter(name="contextTargets")
    def context_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]]]:
        """
        The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        """
        return pulumi.get(self, "context_targets")

    @context_targets.setter
    def context_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentContextTargetArgs']]]]):
        pulumi.set(self, "context_targets", value)

    @_builtins.property
    @pulumi.getter(name="envKey")
    def env_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "env_key")

    @env_key.setter
    def env_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env_key", value)

    @_builtins.property
    @pulumi.getter
    def fallthrough(self) -> Optional[pulumi.Input['FeatureFlagEnvironmentFallthroughArgs']]:
        """
        Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        """
        return pulumi.get(self, "fallthrough")

    @fallthrough.setter
    def fallthrough(self, value: Optional[pulumi.Input['FeatureFlagEnvironmentFallthroughArgs']]):
        pulumi.set(self, "fallthrough", value)

    @_builtins.property
    @pulumi.getter(name="flagId")
    def flag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "flag_id")

    @flag_id.setter
    def flag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flag_id", value)

    @_builtins.property
    @pulumi.getter(name="offVariation")
    def off_variation(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The index of the variation to serve if targeting is disabled.
        """
        return pulumi.get(self, "off_variation")

    @off_variation.setter
    def off_variation(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "off_variation", value)

    @_builtins.property
    @pulumi.getter
    def on(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether targeting is enabled. Defaults to `false` if not set.
        """
        return pulumi.get(self, "on")

    @on.setter
    def on(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "on", value)

    @_builtins.property
    @pulumi.getter
    def prerequisites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]]]:
        """
        List of nested blocks describing prerequisite feature flags rules.
        """
        return pulumi.get(self, "prerequisites")

    @prerequisites.setter
    def prerequisites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentPrerequisiteArgs']]]]):
        pulumi.set(self, "prerequisites", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]]]:
        """
        List of logical targeting rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]]]:
        """
        Set of nested blocks describing the individual user targets for each variation.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureFlagEnvironmentTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="trackEvents")
    def track_events(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        return pulumi.get(self, "track_events")

    @track_events.setter
    def track_events(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_events", value)


@pulumi.type_token("launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment")
class FeatureFlagEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 context_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentContextTargetArgs', 'FeatureFlagEnvironmentContextTargetArgsDict']]]]] = None,
                 env_key: Optional[pulumi.Input[_builtins.str]] = None,
                 fallthrough: Optional[pulumi.Input[Union['FeatureFlagEnvironmentFallthroughArgs', 'FeatureFlagEnvironmentFallthroughArgsDict']]] = None,
                 flag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 off_variation: Optional[pulumi.Input[_builtins.int]] = None,
                 on: Optional[pulumi.Input[_builtins.bool]] = None,
                 prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentPrerequisiteArgs', 'FeatureFlagEnvironmentPrerequisiteArgsDict']]]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentRuleArgs', 'FeatureFlagEnvironmentRuleArgsDict']]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentTargetArgs', 'FeatureFlagEnvironmentTargetArgsDict']]]]] = None,
                 track_events: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_launchdarkly as launchdarkly

        # This example shows the use of prerequisites, targets, context targets, rules, and fallthrough for a feature flag environment
        number_ff_env = launchdarkly.FeatureFlagEnvironment("number_ff_env",
            flag_id=number["id"],
            env_key=staging["key"],
            on=True,
            prerequisites=[{
                "flag_key": basic["key"],
                "variation": 0,
            }],
            targets=[
                {
                    "values": ["user0"],
                    "variation": 0,
                },
                {
                    "values": [
                        "user1",
                        "user2",
                    ],
                    "variation": 1,
                },
            ],
            context_targets=[{
                "values": ["accountX"],
                "variation": 1,
                "context_kind": "account",
            }],
            rules=[{
                "description": "example targeting rule with two clauses",
                "clauses": [
                    {
                        "attribute": "country",
                        "op": "startsWith",
                        "values": [
                            "aus",
                            "de",
                            "united",
                        ],
                        "negate": False,
                    },
                    {
                        "attribute": "segmentMatch",
                        "op": "segmentMatch",
                        "values": [example["key"]],
                        "negate": False,
                    },
                ],
                "variation": 0,
            }],
            fallthrough={
                "rollout_weights": [
                    60000,
                    40000,
                    0,
                ],
                "context_kind": "account",
                "bucket_by": "accountId",
            },
            off_variation=2)
        # This example shows the minimum configuration required to create a feature flag environment
        basic_flag_environment = launchdarkly.FeatureFlagEnvironment("basic_flag_environment",
            flag_id=basic_flag["id"],
            env_key="development",
            on=True,
            fallthrough={
                "variation": 1,
            },
            off_variation=0)
        # This example shows a feature flag environment with a targeting rule that uses every clause operator
        big_flag_environment = launchdarkly.FeatureFlagEnvironment("big_flag_environment",
            flag_id=big_flag["id"],
            env_key="development",
            on=True,
            rules=[{
                "description": "Example targeting rule with every clause operator",
                "clauses": [
                    {
                        "attribute": "username",
                        "op": "in",
                        "values": [
                            "henrietta powell",
                            "wally waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "endsWith",
                        "values": [
                            "powell",
                            "waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "startsWith",
                        "values": [
                            "henrietta",
                            "wally",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "matches",
                        "values": ["henr*"],
                    },
                    {
                        "attribute": "username",
                        "op": "contains",
                        "values": ["water"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "before",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "after",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "version",
                        "op": "semVerEqual",
                        "values": [
                            "1.0.0",
                            "1.0.1",
                        ],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerLessThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerGreaterThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "context",
                        "op": "segmentMatch",
                        "values": ["test-segment"],
                    },
                ],
                "rollout_weights": [
                    40000,
                    60000,
                ],
                "bucket_by": "country",
                "context_kind": "account",
            }],
            fallthrough={
                "variation": 1,
            },
            off_variation=0)
        ```

        ## Import

        LaunchDarkly feature flag environments can be imported using the resource's ID in the form `project_key/env_key/flag_key`

        ```sh
        $ pulumi import launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment example example-project/example-env/example-flag-key
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentContextTargetArgs', 'FeatureFlagEnvironmentContextTargetArgsDict']]]] context_targets: The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        :param pulumi.Input[_builtins.str] env_key: The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Union['FeatureFlagEnvironmentFallthroughArgs', 'FeatureFlagEnvironmentFallthroughArgsDict']] fallthrough: Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        :param pulumi.Input[_builtins.str] flag_id: The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[_builtins.int] off_variation: The index of the variation to serve if targeting is disabled.
        :param pulumi.Input[_builtins.bool] on: Whether targeting is enabled. Defaults to `false` if not set.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentPrerequisiteArgs', 'FeatureFlagEnvironmentPrerequisiteArgsDict']]]] prerequisites: List of nested blocks describing prerequisite feature flags rules.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentRuleArgs', 'FeatureFlagEnvironmentRuleArgsDict']]]] rules: List of logical targeting rules.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentTargetArgs', 'FeatureFlagEnvironmentTargetArgsDict']]]] targets: Set of nested blocks describing the individual user targets for each variation.
        :param pulumi.Input[_builtins.bool] track_events: Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FeatureFlagEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_launchdarkly as launchdarkly

        # This example shows the use of prerequisites, targets, context targets, rules, and fallthrough for a feature flag environment
        number_ff_env = launchdarkly.FeatureFlagEnvironment("number_ff_env",
            flag_id=number["id"],
            env_key=staging["key"],
            on=True,
            prerequisites=[{
                "flag_key": basic["key"],
                "variation": 0,
            }],
            targets=[
                {
                    "values": ["user0"],
                    "variation": 0,
                },
                {
                    "values": [
                        "user1",
                        "user2",
                    ],
                    "variation": 1,
                },
            ],
            context_targets=[{
                "values": ["accountX"],
                "variation": 1,
                "context_kind": "account",
            }],
            rules=[{
                "description": "example targeting rule with two clauses",
                "clauses": [
                    {
                        "attribute": "country",
                        "op": "startsWith",
                        "values": [
                            "aus",
                            "de",
                            "united",
                        ],
                        "negate": False,
                    },
                    {
                        "attribute": "segmentMatch",
                        "op": "segmentMatch",
                        "values": [example["key"]],
                        "negate": False,
                    },
                ],
                "variation": 0,
            }],
            fallthrough={
                "rollout_weights": [
                    60000,
                    40000,
                    0,
                ],
                "context_kind": "account",
                "bucket_by": "accountId",
            },
            off_variation=2)
        # This example shows the minimum configuration required to create a feature flag environment
        basic_flag_environment = launchdarkly.FeatureFlagEnvironment("basic_flag_environment",
            flag_id=basic_flag["id"],
            env_key="development",
            on=True,
            fallthrough={
                "variation": 1,
            },
            off_variation=0)
        # This example shows a feature flag environment with a targeting rule that uses every clause operator
        big_flag_environment = launchdarkly.FeatureFlagEnvironment("big_flag_environment",
            flag_id=big_flag["id"],
            env_key="development",
            on=True,
            rules=[{
                "description": "Example targeting rule with every clause operator",
                "clauses": [
                    {
                        "attribute": "username",
                        "op": "in",
                        "values": [
                            "henrietta powell",
                            "wally waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "endsWith",
                        "values": [
                            "powell",
                            "waterbear",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "startsWith",
                        "values": [
                            "henrietta",
                            "wally",
                        ],
                    },
                    {
                        "attribute": "username",
                        "op": "matches",
                        "values": ["henr*"],
                    },
                    {
                        "attribute": "username",
                        "op": "contains",
                        "values": ["water"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "lessThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThan",
                        "values": ["100"],
                    },
                    {
                        "attribute": "pageVisits",
                        "op": "greaterThanOrEqual",
                        "values": ["100"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "before",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "creationDate",
                        "op": "after",
                        "values": ["2024-05-03T15:57:30Z"],
                    },
                    {
                        "attribute": "version",
                        "op": "semVerEqual",
                        "values": [
                            "1.0.0",
                            "1.0.1",
                        ],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerLessThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "version",
                        "op": "semVerGreaterThan",
                        "values": ["1.0.0"],
                        "context_kind": "application",
                    },
                    {
                        "attribute": "context",
                        "op": "segmentMatch",
                        "values": ["test-segment"],
                    },
                ],
                "rollout_weights": [
                    40000,
                    60000,
                ],
                "bucket_by": "country",
                "context_kind": "account",
            }],
            fallthrough={
                "variation": 1,
            },
            off_variation=0)
        ```

        ## Import

        LaunchDarkly feature flag environments can be imported using the resource's ID in the form `project_key/env_key/flag_key`

        ```sh
        $ pulumi import launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment example example-project/example-env/example-flag-key
        ```

        :param str resource_name: The name of the resource.
        :param FeatureFlagEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FeatureFlagEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 context_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentContextTargetArgs', 'FeatureFlagEnvironmentContextTargetArgsDict']]]]] = None,
                 env_key: Optional[pulumi.Input[_builtins.str]] = None,
                 fallthrough: Optional[pulumi.Input[Union['FeatureFlagEnvironmentFallthroughArgs', 'FeatureFlagEnvironmentFallthroughArgsDict']]] = None,
                 flag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 off_variation: Optional[pulumi.Input[_builtins.int]] = None,
                 on: Optional[pulumi.Input[_builtins.bool]] = None,
                 prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentPrerequisiteArgs', 'FeatureFlagEnvironmentPrerequisiteArgsDict']]]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentRuleArgs', 'FeatureFlagEnvironmentRuleArgsDict']]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentTargetArgs', 'FeatureFlagEnvironmentTargetArgsDict']]]]] = None,
                 track_events: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FeatureFlagEnvironmentArgs.__new__(FeatureFlagEnvironmentArgs)

            __props__.__dict__["context_targets"] = context_targets
            if env_key is None and not opts.urn:
                raise TypeError("Missing required property 'env_key'")
            __props__.__dict__["env_key"] = env_key
            if fallthrough is None and not opts.urn:
                raise TypeError("Missing required property 'fallthrough'")
            __props__.__dict__["fallthrough"] = fallthrough
            if flag_id is None and not opts.urn:
                raise TypeError("Missing required property 'flag_id'")
            __props__.__dict__["flag_id"] = flag_id
            if off_variation is None and not opts.urn:
                raise TypeError("Missing required property 'off_variation'")
            __props__.__dict__["off_variation"] = off_variation
            __props__.__dict__["on"] = on
            __props__.__dict__["prerequisites"] = prerequisites
            __props__.__dict__["rules"] = rules
            __props__.__dict__["targets"] = targets
            __props__.__dict__["track_events"] = track_events
        super(FeatureFlagEnvironment, __self__).__init__(
            'launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            context_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentContextTargetArgs', 'FeatureFlagEnvironmentContextTargetArgsDict']]]]] = None,
            env_key: Optional[pulumi.Input[_builtins.str]] = None,
            fallthrough: Optional[pulumi.Input[Union['FeatureFlagEnvironmentFallthroughArgs', 'FeatureFlagEnvironmentFallthroughArgsDict']]] = None,
            flag_id: Optional[pulumi.Input[_builtins.str]] = None,
            off_variation: Optional[pulumi.Input[_builtins.int]] = None,
            on: Optional[pulumi.Input[_builtins.bool]] = None,
            prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentPrerequisiteArgs', 'FeatureFlagEnvironmentPrerequisiteArgsDict']]]]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentRuleArgs', 'FeatureFlagEnvironmentRuleArgsDict']]]]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentTargetArgs', 'FeatureFlagEnvironmentTargetArgsDict']]]]] = None,
            track_events: Optional[pulumi.Input[_builtins.bool]] = None) -> 'FeatureFlagEnvironment':
        """
        Get an existing FeatureFlagEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentContextTargetArgs', 'FeatureFlagEnvironmentContextTargetArgsDict']]]] context_targets: The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        :param pulumi.Input[_builtins.str] env_key: The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[Union['FeatureFlagEnvironmentFallthroughArgs', 'FeatureFlagEnvironmentFallthroughArgsDict']] fallthrough: Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        :param pulumi.Input[_builtins.str] flag_id: The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        :param pulumi.Input[_builtins.int] off_variation: The index of the variation to serve if targeting is disabled.
        :param pulumi.Input[_builtins.bool] on: Whether targeting is enabled. Defaults to `false` if not set.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentPrerequisiteArgs', 'FeatureFlagEnvironmentPrerequisiteArgsDict']]]] prerequisites: List of nested blocks describing prerequisite feature flags rules.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentRuleArgs', 'FeatureFlagEnvironmentRuleArgsDict']]]] rules: List of logical targeting rules.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FeatureFlagEnvironmentTargetArgs', 'FeatureFlagEnvironmentTargetArgsDict']]]] targets: Set of nested blocks describing the individual user targets for each variation.
        :param pulumi.Input[_builtins.bool] track_events: Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FeatureFlagEnvironmentState.__new__(_FeatureFlagEnvironmentState)

        __props__.__dict__["context_targets"] = context_targets
        __props__.__dict__["env_key"] = env_key
        __props__.__dict__["fallthrough"] = fallthrough
        __props__.__dict__["flag_id"] = flag_id
        __props__.__dict__["off_variation"] = off_variation
        __props__.__dict__["on"] = on
        __props__.__dict__["prerequisites"] = prerequisites
        __props__.__dict__["rules"] = rules
        __props__.__dict__["targets"] = targets
        __props__.__dict__["track_events"] = track_events
        return FeatureFlagEnvironment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="contextTargets")
    def context_targets(self) -> pulumi.Output[Optional[Sequence['outputs.FeatureFlagEnvironmentContextTarget']]]:
        """
        The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        """
        return pulumi.get(self, "context_targets")

    @_builtins.property
    @pulumi.getter(name="envKey")
    def env_key(self) -> pulumi.Output[_builtins.str]:
        """
        The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "env_key")

    @_builtins.property
    @pulumi.getter
    def fallthrough(self) -> pulumi.Output['outputs.FeatureFlagEnvironmentFallthrough']:
        """
        Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        """
        return pulumi.get(self, "fallthrough")

    @_builtins.property
    @pulumi.getter(name="flagId")
    def flag_id(self) -> pulumi.Output[_builtins.str]:
        """
        The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        """
        return pulumi.get(self, "flag_id")

    @_builtins.property
    @pulumi.getter(name="offVariation")
    def off_variation(self) -> pulumi.Output[_builtins.int]:
        """
        The index of the variation to serve if targeting is disabled.
        """
        return pulumi.get(self, "off_variation")

    @_builtins.property
    @pulumi.getter
    def on(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether targeting is enabled. Defaults to `false` if not set.
        """
        return pulumi.get(self, "on")

    @_builtins.property
    @pulumi.getter
    def prerequisites(self) -> pulumi.Output[Optional[Sequence['outputs.FeatureFlagEnvironmentPrerequisite']]]:
        """
        List of nested blocks describing prerequisite feature flags rules.
        """
        return pulumi.get(self, "prerequisites")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.FeatureFlagEnvironmentRule']]]:
        """
        List of logical targeting rules.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Optional[Sequence['outputs.FeatureFlagEnvironmentTarget']]]:
        """
        Set of nested blocks describing the individual user targets for each variation.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="trackEvents")
    def track_events(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        return pulumi.get(self, "track_events")

