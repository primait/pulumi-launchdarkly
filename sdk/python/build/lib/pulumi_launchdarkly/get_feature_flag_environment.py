# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFeatureFlagEnvironmentResult',
    'AwaitableGetFeatureFlagEnvironmentResult',
    'get_feature_flag_environment',
    'get_feature_flag_environment_output',
]

@pulumi.output_type
class GetFeatureFlagEnvironmentResult:
    """
    A collection of values returned by getFeatureFlagEnvironment.
    """
    def __init__(__self__, context_targets=None, env_key=None, fallthroughs=None, flag_id=None, id=None, off_variation=None, on=None, prerequisites=None, rules=None, targets=None, track_events=None):
        if context_targets and not isinstance(context_targets, list):
            raise TypeError("Expected argument 'context_targets' to be a list")
        pulumi.set(__self__, "context_targets", context_targets)
        if env_key and not isinstance(env_key, str):
            raise TypeError("Expected argument 'env_key' to be a str")
        pulumi.set(__self__, "env_key", env_key)
        if fallthroughs and not isinstance(fallthroughs, list):
            raise TypeError("Expected argument 'fallthroughs' to be a list")
        pulumi.set(__self__, "fallthroughs", fallthroughs)
        if flag_id and not isinstance(flag_id, str):
            raise TypeError("Expected argument 'flag_id' to be a str")
        pulumi.set(__self__, "flag_id", flag_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if off_variation and not isinstance(off_variation, int):
            raise TypeError("Expected argument 'off_variation' to be a int")
        pulumi.set(__self__, "off_variation", off_variation)
        if on and not isinstance(on, bool):
            raise TypeError("Expected argument 'on' to be a bool")
        pulumi.set(__self__, "on", on)
        if prerequisites and not isinstance(prerequisites, list):
            raise TypeError("Expected argument 'prerequisites' to be a list")
        pulumi.set(__self__, "prerequisites", prerequisites)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)
        if track_events and not isinstance(track_events, bool):
            raise TypeError("Expected argument 'track_events' to be a bool")
        pulumi.set(__self__, "track_events", track_events)

    @property
    @pulumi.getter(name="contextTargets")
    def context_targets(self) -> Sequence['outputs.GetFeatureFlagEnvironmentContextTargetResult']:
        """
        The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        """
        return pulumi.get(self, "context_targets")

    @property
    @pulumi.getter(name="envKey")
    def env_key(self) -> str:
        """
        The environment key.
        """
        return pulumi.get(self, "env_key")

    @property
    @pulumi.getter
    def fallthroughs(self) -> Sequence['outputs.GetFeatureFlagEnvironmentFallthroughResult']:
        """
        Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        """
        return pulumi.get(self, "fallthroughs")

    @property
    @pulumi.getter(name="flagId")
    def flag_id(self) -> str:
        """
        The feature flag's unique `id` in the format `project_key/flag_key`.
        """
        return pulumi.get(self, "flag_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="offVariation")
    def off_variation(self) -> int:
        """
        The index of the variation to serve if targeting is disabled.
        """
        return pulumi.get(self, "off_variation")

    @property
    @pulumi.getter
    def on(self) -> bool:
        """
        Whether targeting is enabled. Defaults to `false` if not set.
        """
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def prerequisites(self) -> Sequence['outputs.GetFeatureFlagEnvironmentPrerequisiteResult']:
        """
        List of nested blocks describing prerequisite feature flags rules.
        """
        return pulumi.get(self, "prerequisites")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetFeatureFlagEnvironmentRuleResult']:
        """
        List of logical targeting rules.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetFeatureFlagEnvironmentTargetResult']:
        """
        Set of nested blocks describing the individual user targets for each variation.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="trackEvents")
    def track_events(self) -> bool:
        """
        Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        """
        return pulumi.get(self, "track_events")


class AwaitableGetFeatureFlagEnvironmentResult(GetFeatureFlagEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeatureFlagEnvironmentResult(
            context_targets=self.context_targets,
            env_key=self.env_key,
            fallthroughs=self.fallthroughs,
            flag_id=self.flag_id,
            id=self.id,
            off_variation=self.off_variation,
            on=self.on,
            prerequisites=self.prerequisites,
            rules=self.rules,
            targets=self.targets,
            track_events=self.track_events)


def get_feature_flag_environment(env_key: Optional[str] = None,
                                 flag_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeatureFlagEnvironmentResult:
    """
    Provides a LaunchDarkly environment-specific feature flag data source.

    This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_feature_flag_environment(flag_id="example-project/example-flag",
        env_key="example-env")
    ```


    :param str env_key: The environment key.
    :param str flag_id: The feature flag's unique `id` in the format `project_key/flag_key`.
    """
    __args__ = dict()
    __args__['envKey'] = env_key
    __args__['flagId'] = flag_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment', __args__, opts=opts, typ=GetFeatureFlagEnvironmentResult).value

    return AwaitableGetFeatureFlagEnvironmentResult(
        context_targets=pulumi.get(__ret__, 'context_targets'),
        env_key=pulumi.get(__ret__, 'env_key'),
        fallthroughs=pulumi.get(__ret__, 'fallthroughs'),
        flag_id=pulumi.get(__ret__, 'flag_id'),
        id=pulumi.get(__ret__, 'id'),
        off_variation=pulumi.get(__ret__, 'off_variation'),
        on=pulumi.get(__ret__, 'on'),
        prerequisites=pulumi.get(__ret__, 'prerequisites'),
        rules=pulumi.get(__ret__, 'rules'),
        targets=pulumi.get(__ret__, 'targets'),
        track_events=pulumi.get(__ret__, 'track_events'))
def get_feature_flag_environment_output(env_key: Optional[pulumi.Input[str]] = None,
                                        flag_id: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFeatureFlagEnvironmentResult]:
    """
    Provides a LaunchDarkly environment-specific feature flag data source.

    This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_feature_flag_environment(flag_id="example-project/example-flag",
        env_key="example-env")
    ```


    :param str env_key: The environment key.
    :param str flag_id: The feature flag's unique `id` in the format `project_key/flag_key`.
    """
    __args__ = dict()
    __args__['envKey'] = env_key
    __args__['flagId'] = flag_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment', __args__, opts=opts, typ=GetFeatureFlagEnvironmentResult)
    return __ret__.apply(lambda __response__: GetFeatureFlagEnvironmentResult(
        context_targets=pulumi.get(__response__, 'context_targets'),
        env_key=pulumi.get(__response__, 'env_key'),
        fallthroughs=pulumi.get(__response__, 'fallthroughs'),
        flag_id=pulumi.get(__response__, 'flag_id'),
        id=pulumi.get(__response__, 'id'),
        off_variation=pulumi.get(__response__, 'off_variation'),
        on=pulumi.get(__response__, 'on'),
        prerequisites=pulumi.get(__response__, 'prerequisites'),
        rules=pulumi.get(__response__, 'rules'),
        targets=pulumi.get(__response__, 'targets'),
        track_events=pulumi.get(__response__, 'track_events')))
