# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFeatureFlagResult',
    'AwaitableGetFeatureFlagResult',
    'get_feature_flag',
    'get_feature_flag_output',
]

@pulumi.output_type
class GetFeatureFlagResult:
    """
    A collection of values returned by getFeatureFlag.
    """
    def __init__(__self__, archived=None, client_side_availabilities=None, custom_properties=None, defaults=None, description=None, id=None, include_in_snippet=None, key=None, maintainer_id=None, maintainer_team_key=None, name=None, project_key=None, tags=None, temporary=None, variation_type=None, variations=None):
        if archived and not isinstance(archived, bool):
            raise TypeError("Expected argument 'archived' to be a bool")
        pulumi.set(__self__, "archived", archived)
        if client_side_availabilities and not isinstance(client_side_availabilities, list):
            raise TypeError("Expected argument 'client_side_availabilities' to be a list")
        pulumi.set(__self__, "client_side_availabilities", client_side_availabilities)
        if custom_properties and not isinstance(custom_properties, list):
            raise TypeError("Expected argument 'custom_properties' to be a list")
        pulumi.set(__self__, "custom_properties", custom_properties)
        if defaults and not isinstance(defaults, list):
            raise TypeError("Expected argument 'defaults' to be a list")
        pulumi.set(__self__, "defaults", defaults)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_in_snippet and not isinstance(include_in_snippet, bool):
            raise TypeError("Expected argument 'include_in_snippet' to be a bool")
        pulumi.set(__self__, "include_in_snippet", include_in_snippet)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if maintainer_id and not isinstance(maintainer_id, str):
            raise TypeError("Expected argument 'maintainer_id' to be a str")
        pulumi.set(__self__, "maintainer_id", maintainer_id)
        if maintainer_team_key and not isinstance(maintainer_team_key, str):
            raise TypeError("Expected argument 'maintainer_team_key' to be a str")
        pulumi.set(__self__, "maintainer_team_key", maintainer_team_key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_key and not isinstance(project_key, str):
            raise TypeError("Expected argument 'project_key' to be a str")
        pulumi.set(__self__, "project_key", project_key)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if temporary and not isinstance(temporary, bool):
            raise TypeError("Expected argument 'temporary' to be a bool")
        pulumi.set(__self__, "temporary", temporary)
        if variation_type and not isinstance(variation_type, str):
            raise TypeError("Expected argument 'variation_type' to be a str")
        pulumi.set(__self__, "variation_type", variation_type)
        if variations and not isinstance(variations, list):
            raise TypeError("Expected argument 'variations' to be a list")
        pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def archived(self) -> bool:
        """
        Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
        """
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="clientSideAvailabilities")
    def client_side_availabilities(self) -> Sequence['outputs.GetFeatureFlagClientSideAvailabilityResult']:
        return pulumi.get(self, "client_side_availabilities")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Sequence['outputs.GetFeatureFlagCustomPropertyResult']:
        """
        List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def defaults(self) -> Sequence['outputs.GetFeatureFlagDefaultResult']:
        """
        A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
        """
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The feature flag's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeInSnippet")
    @_utilities.deprecated("""'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability.""")
    def include_in_snippet(self) -> bool:
        """
        Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
        """
        return pulumi.get(self, "include_in_snippet")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The unique feature flag key that references the flag in your application code.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maintainerId")
    def maintainer_id(self) -> str:
        return pulumi.get(self, "maintainer_id")

    @property
    @pulumi.getter(name="maintainerTeamKey")
    def maintainer_team_key(self) -> str:
        """
        The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        """
        return pulumi.get(self, "maintainer_team_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The feature flag's human-readable name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> str:
        """
        The feature flag's project key.
        """
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Tags associated with your resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def temporary(self) -> bool:
        """
        Specifies whether the flag is a temporary flag.
        """
        return pulumi.get(self, "temporary")

    @property
    @pulumi.getter(name="variationType")
    def variation_type(self) -> str:
        """
        The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
        """
        return pulumi.get(self, "variation_type")

    @property
    @pulumi.getter
    def variations(self) -> Sequence['outputs.GetFeatureFlagVariationResult']:
        """
        An array of possible variations for the flag
        """
        return pulumi.get(self, "variations")


class AwaitableGetFeatureFlagResult(GetFeatureFlagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeatureFlagResult(
            archived=self.archived,
            client_side_availabilities=self.client_side_availabilities,
            custom_properties=self.custom_properties,
            defaults=self.defaults,
            description=self.description,
            id=self.id,
            include_in_snippet=self.include_in_snippet,
            key=self.key,
            maintainer_id=self.maintainer_id,
            maintainer_team_key=self.maintainer_team_key,
            name=self.name,
            project_key=self.project_key,
            tags=self.tags,
            temporary=self.temporary,
            variation_type=self.variation_type,
            variations=self.variations)


def get_feature_flag(key: Optional[str] = None,
                     maintainer_id: Optional[str] = None,
                     maintainer_team_key: Optional[str] = None,
                     project_key: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeatureFlagResult:
    """
    Provides a LaunchDarkly feature flag data source.

    This data source allows you to retrieve feature flag information from your LaunchDarkly organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_feature_flag(key="example-flag",
        project_key="example-project")
    ```


    :param str key: The unique feature flag key that references the flag in your application code.
    :param str maintainer_team_key: The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
    :param str project_key: The feature flag's project key.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['maintainerId'] = maintainer_id
    __args__['maintainerTeamKey'] = maintainer_team_key
    __args__['projectKey'] = project_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('launchdarkly:index/getFeatureFlag:getFeatureFlag', __args__, opts=opts, typ=GetFeatureFlagResult).value

    return AwaitableGetFeatureFlagResult(
        archived=pulumi.get(__ret__, 'archived'),
        client_side_availabilities=pulumi.get(__ret__, 'client_side_availabilities'),
        custom_properties=pulumi.get(__ret__, 'custom_properties'),
        defaults=pulumi.get(__ret__, 'defaults'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        include_in_snippet=pulumi.get(__ret__, 'include_in_snippet'),
        key=pulumi.get(__ret__, 'key'),
        maintainer_id=pulumi.get(__ret__, 'maintainer_id'),
        maintainer_team_key=pulumi.get(__ret__, 'maintainer_team_key'),
        name=pulumi.get(__ret__, 'name'),
        project_key=pulumi.get(__ret__, 'project_key'),
        tags=pulumi.get(__ret__, 'tags'),
        temporary=pulumi.get(__ret__, 'temporary'),
        variation_type=pulumi.get(__ret__, 'variation_type'),
        variations=pulumi.get(__ret__, 'variations'))
def get_feature_flag_output(key: Optional[pulumi.Input[str]] = None,
                            maintainer_id: Optional[pulumi.Input[Optional[str]]] = None,
                            maintainer_team_key: Optional[pulumi.Input[Optional[str]]] = None,
                            project_key: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFeatureFlagResult]:
    """
    Provides a LaunchDarkly feature flag data source.

    This data source allows you to retrieve feature flag information from your LaunchDarkly organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_launchdarkly as launchdarkly

    example = launchdarkly.get_feature_flag(key="example-flag",
        project_key="example-project")
    ```


    :param str key: The unique feature flag key that references the flag in your application code.
    :param str maintainer_team_key: The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
    :param str project_key: The feature flag's project key.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['maintainerId'] = maintainer_id
    __args__['maintainerTeamKey'] = maintainer_team_key
    __args__['projectKey'] = project_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('launchdarkly:index/getFeatureFlag:getFeatureFlag', __args__, opts=opts, typ=GetFeatureFlagResult)
    return __ret__.apply(lambda __response__: GetFeatureFlagResult(
        archived=pulumi.get(__response__, 'archived'),
        client_side_availabilities=pulumi.get(__response__, 'client_side_availabilities'),
        custom_properties=pulumi.get(__response__, 'custom_properties'),
        defaults=pulumi.get(__response__, 'defaults'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        include_in_snippet=pulumi.get(__response__, 'include_in_snippet'),
        key=pulumi.get(__response__, 'key'),
        maintainer_id=pulumi.get(__response__, 'maintainer_id'),
        maintainer_team_key=pulumi.get(__response__, 'maintainer_team_key'),
        name=pulumi.get(__response__, 'name'),
        project_key=pulumi.get(__response__, 'project_key'),
        tags=pulumi.get(__response__, 'tags'),
        temporary=pulumi.get(__response__, 'temporary'),
        variation_type=pulumi.get(__response__, 'variation_type'),
        variations=pulumi.get(__response__, 'variations')))
