// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Launchdarkly = Pulumi.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var buildingMaterials = new Launchdarkly.FeatureFlag("building_materials", new()
    ///     {
    ///         ProjectKey = example.Key,
    ///         Key = "building-materials",
    ///         Name = "Building materials",
    ///         Description = "this is a multivariate flag with string variations.",
    ///         VariationType = "string",
    ///         Variations = new[]
    ///         {
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Value = "straw",
    ///                 Name = "Straw",
    ///                 Description = "Watch out for wind.",
    ///             },
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Value = "sticks",
    ///                 Name = "Sticks",
    ///                 Description = "Sturdier than straw",
    ///             },
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Value = "bricks",
    ///                 Name = "Bricks",
    ///                 Description = "The strongest variation",
    ///             },
    ///         },
    ///         ClientSideAvailabilities = new[]
    ///         {
    ///             new Launchdarkly.Inputs.FeatureFlagClientSideAvailabilityArgs
    ///             {
    ///                 UsingEnvironmentId = false,
    ///                 UsingMobileKey = true,
    ///             },
    ///         },
    ///         Defaults = new Launchdarkly.Inputs.FeatureFlagDefaultsArgs
    ///         {
    ///             OnVariation = 2,
    ///             OffVariation = 0,
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "example",
    ///             "terraform",
    ///             "multivariate",
    ///             "building-materials",
    ///         },
    ///     });
    /// 
    ///     var jsonExample = new Launchdarkly.FeatureFlag("json_example", new()
    ///     {
    ///         ProjectKey = "example-project",
    ///         Key = "json-example",
    ///         Name = "JSON example flag",
    ///         VariationType = "json",
    ///         Variations = new[]
    ///         {
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Name = "Single foo",
    ///                 Value = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["foo"] = "bar",
    ///                 }),
    ///             },
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Name = "Multiple foos",
    ///                 Value = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["foos"] = new[]
    ///                     {
    ///                         "bar1",
    ///                         "bar2",
    ///                     },
    ///                 }),
    ///             },
    ///         },
    ///         Defaults = new Launchdarkly.Inputs.FeatureFlagDefaultsArgs
    ///         {
    ///             OnVariation = 1,
    ///             OffVariation = 0,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import a feature flag using the feature flag's ID in the format `project_key/flag_key`.
    /// 
    /// ```sh
    /// $ pulumi import launchdarkly:index/featureFlag:FeatureFlag building_materials example-project/building-materials
    /// ```
    /// </summary>
    [LaunchdarklyResourceType("launchdarkly:index/featureFlag:FeatureFlag")]
    public partial class FeatureFlag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
        /// </summary>
        [Output("archived")]
        public Output<bool?> Archived { get; private set; } = null!;

        [Output("clientSideAvailabilities")]
        public Output<ImmutableArray<Outputs.FeatureFlagClientSideAvailability>> ClientSideAvailabilities { get; private set; } = null!;

        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
        /// </summary>
        [Output("customProperties")]
        public Output<ImmutableArray<Outputs.FeatureFlagCustomProperty>> CustomProperties { get; private set; } = null!;

        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
        /// </summary>
        [Output("defaults")]
        public Output<Outputs.FeatureFlagDefaults> Defaults { get; private set; } = null!;

        /// <summary>
        /// The feature flag's description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
        /// </summary>
        [Output("includeInSnippet")]
        public Output<bool> IncludeInSnippet { get; private set; } = null!;

        /// <summary>
        /// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        [Output("maintainerId")]
        public Output<string> MaintainerId { get; private set; } = null!;

        /// <summary>
        /// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        /// </summary>
        [Output("maintainerTeamKey")]
        public Output<string> MaintainerTeamKey { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the feature flag.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("projectKey")]
        public Output<string> ProjectKey { get; private set; } = null!;

        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        [Output("temporary")]
        public Output<bool?> Temporary { get; private set; } = null!;

        /// <summary>
        /// The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("variationType")]
        public Output<string> VariationType { get; private set; } = null!;

        /// <summary>
        /// An array of possible variations for the flag
        /// </summary>
        [Output("variations")]
        public Output<ImmutableArray<Outputs.FeatureFlagVariation>> Variations { get; private set; } = null!;


        /// <summary>
        /// Create a FeatureFlag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FeatureFlag(string name, FeatureFlagArgs args, CustomResourceOptions? options = null)
            : base("launchdarkly:index/featureFlag:FeatureFlag", name, args ?? new FeatureFlagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FeatureFlag(string name, Input<string> id, FeatureFlagState? state = null, CustomResourceOptions? options = null)
            : base("launchdarkly:index/featureFlag:FeatureFlag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/primait/pulumi-launchdarkly/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FeatureFlag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FeatureFlag Get(string name, Input<string> id, FeatureFlagState? state = null, CustomResourceOptions? options = null)
        {
            return new FeatureFlag(name, id, state, options);
        }
    }

    public sealed class FeatureFlagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        [Input("clientSideAvailabilities")]
        private InputList<Inputs.FeatureFlagClientSideAvailabilityArgs>? _clientSideAvailabilities;
        public InputList<Inputs.FeatureFlagClientSideAvailabilityArgs> ClientSideAvailabilities
        {
            get => _clientSideAvailabilities ?? (_clientSideAvailabilities = new InputList<Inputs.FeatureFlagClientSideAvailabilityArgs>());
            set => _clientSideAvailabilities = value;
        }

        [Input("customProperties")]
        private InputList<Inputs.FeatureFlagCustomPropertyArgs>? _customProperties;

        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
        /// </summary>
        public InputList<Inputs.FeatureFlagCustomPropertyArgs> CustomProperties
        {
            get => _customProperties ?? (_customProperties = new InputList<Inputs.FeatureFlagCustomPropertyArgs>());
            set => _customProperties = value;
        }

        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
        /// </summary>
        [Input("defaults")]
        public Input<Inputs.FeatureFlagDefaultsArgs>? Defaults { get; set; }

        /// <summary>
        /// The feature flag's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
        /// </summary>
        [Input("includeInSnippet")]
        public Input<bool>? IncludeInSnippet { get; set; }

        /// <summary>
        /// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        /// </summary>
        [Input("maintainerTeamKey")]
        public Input<string>? MaintainerTeamKey { get; set; }

        /// <summary>
        /// The human-readable name of the feature flag.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        [Input("temporary")]
        public Input<bool>? Temporary { get; set; }

        /// <summary>
        /// The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("variationType", required: true)]
        public Input<string> VariationType { get; set; } = null!;

        [Input("variations")]
        private InputList<Inputs.FeatureFlagVariationArgs>? _variations;

        /// <summary>
        /// An array of possible variations for the flag
        /// </summary>
        public InputList<Inputs.FeatureFlagVariationArgs> Variations
        {
            get => _variations ?? (_variations = new InputList<Inputs.FeatureFlagVariationArgs>());
            set => _variations = value;
        }

        public FeatureFlagArgs()
        {
        }
        public static new FeatureFlagArgs Empty => new FeatureFlagArgs();
    }

    public sealed class FeatureFlagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        [Input("clientSideAvailabilities")]
        private InputList<Inputs.FeatureFlagClientSideAvailabilityGetArgs>? _clientSideAvailabilities;
        public InputList<Inputs.FeatureFlagClientSideAvailabilityGetArgs> ClientSideAvailabilities
        {
            get => _clientSideAvailabilities ?? (_clientSideAvailabilities = new InputList<Inputs.FeatureFlagClientSideAvailabilityGetArgs>());
            set => _clientSideAvailabilities = value;
        }

        [Input("customProperties")]
        private InputList<Inputs.FeatureFlagCustomPropertyGetArgs>? _customProperties;

        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
        /// </summary>
        public InputList<Inputs.FeatureFlagCustomPropertyGetArgs> CustomProperties
        {
            get => _customProperties ?? (_customProperties = new InputList<Inputs.FeatureFlagCustomPropertyGetArgs>());
            set => _customProperties = value;
        }

        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
        /// </summary>
        [Input("defaults")]
        public Input<Inputs.FeatureFlagDefaultsGetArgs>? Defaults { get; set; }

        /// <summary>
        /// The feature flag's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
        /// </summary>
        [Input("includeInSnippet")]
        public Input<bool>? IncludeInSnippet { get; set; }

        /// <summary>
        /// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        /// </summary>
        [Input("maintainerTeamKey")]
        public Input<string>? MaintainerTeamKey { get; set; }

        /// <summary>
        /// The human-readable name of the feature flag.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        [Input("temporary")]
        public Input<bool>? Temporary { get; set; }

        /// <summary>
        /// The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("variationType")]
        public Input<string>? VariationType { get; set; }

        [Input("variations")]
        private InputList<Inputs.FeatureFlagVariationGetArgs>? _variations;

        /// <summary>
        /// An array of possible variations for the flag
        /// </summary>
        public InputList<Inputs.FeatureFlagVariationGetArgs> Variations
        {
            get => _variations ?? (_variations = new InputList<Inputs.FeatureFlagVariationGetArgs>());
            set => _variations = value;
        }

        public FeatureFlagState()
        {
        }
        public static new FeatureFlagState Empty => new FeatureFlagState();
    }
}
