// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly.Outputs
{

    [OutputType]
    public sealed class ProjectEnvironment
    {
        /// <summary>
        /// The environment's SDK key.
        /// </summary>
        public readonly string? ApiKey;
        public readonly ImmutableArray<Outputs.ProjectEnvironmentApprovalSetting> ApprovalSettings;
        /// <summary>
        /// The environment's client-side ID.
        /// </summary>
        public readonly string? ClientSideId;
        /// <summary>
        /// The color swatch as an RGB hex value with no leading `#`. For example: `000000`
        /// </summary>
        public readonly string Color;
        /// <summary>
        /// Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
        /// </summary>
        public readonly bool? ConfirmChanges;
        /// <summary>
        /// Denotes whether the environment is critical.
        /// </summary>
        public readonly bool? Critical;
        /// <summary>
        /// Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/home/data-export).
        /// </summary>
        public readonly bool? DefaultTrackEvents;
        /// <summary>
        /// The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/home/organize/environments#ttl-settings).
        /// </summary>
        public readonly int? DefaultTtl;
        /// <summary>
        /// The project-unique key for the environment. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The environment's mobile key.
        /// </summary>
        public readonly string? MobileKey;
        /// <summary>
        /// The name of the environment.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
        /// </summary>
        public readonly bool? RequireComments;
        /// <summary>
        /// Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
        /// </summary>
        public readonly bool? SecureMode;
        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private ProjectEnvironment(
            string? apiKey,

            ImmutableArray<Outputs.ProjectEnvironmentApprovalSetting> approvalSettings,

            string? clientSideId,

            string color,

            bool? confirmChanges,

            bool? critical,

            bool? defaultTrackEvents,

            int? defaultTtl,

            string key,

            string? mobileKey,

            string name,

            bool? requireComments,

            bool? secureMode,

            ImmutableArray<string> tags)
        {
            ApiKey = apiKey;
            ApprovalSettings = approvalSettings;
            ClientSideId = clientSideId;
            Color = color;
            ConfirmChanges = confirmChanges;
            Critical = critical;
            DefaultTrackEvents = defaultTrackEvents;
            DefaultTtl = defaultTtl;
            Key = key;
            MobileKey = mobileKey;
            Name = name;
            RequireComments = requireComments;
            SecureMode = secureMode;
            Tags = tags;
        }
    }
}
