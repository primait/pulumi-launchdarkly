// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    /// <summary>
    /// Provides a LaunchDarkly webhook resource.
    /// 
    /// This resource allows you to create and manage webhooks within your LaunchDarkly organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Launchdarkly = Pulumi.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Launchdarkly.Webhook("example", new()
    ///     {
    ///         Url = "http://webhooks.com/webhook",
    ///         Name = "Example Webhook",
    ///         Tags = new[]
    ///         {
    ///             "terraform",
    ///         },
    ///         On = true,
    ///         Statements = new[]
    ///         {
    ///             new Launchdarkly.Inputs.WebhookStatementArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Effect = "allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "proj/*:env/production:flag/*",
    ///                 },
    ///             },
    ///             new Launchdarkly.Inputs.WebhookStatementArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Effect = "allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "proj/test:env/production:segment/*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LaunchDarkly webhooks can be imported using the webhook's 24 character ID
    /// 
    /// ```sh
    /// $ pulumi import launchdarkly:index/webhook:Webhook example 57c0af609969090743529967
    /// ```
    /// </summary>
    [LaunchdarklyResourceType("launchdarkly:index/webhook:Webhook")]
    public partial class Webhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The webhook's human-readable name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the webhook is enabled.
        /// </summary>
        [Output("on")]
        public Output<bool?> On { get; private set; } = null!;

        /// <summary>
        /// The secret used to sign the webhook.
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// List of policy statement blocks used to filter webhook events. For more information on webhook policy filters read [Adding a policy filter](https://docs.launchdarkly.com/integrations/webhooks#adding-a-policy-filter).
        /// </summary>
        [Output("statements")]
        public Output<ImmutableArray<Outputs.WebhookStatement>> Statements { get; private set; } = null!;

        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The URL of the remote webhook.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Webhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Webhook(string name, WebhookArgs args, CustomResourceOptions? options = null)
            : base("launchdarkly:index/webhook:Webhook", name, args ?? new WebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Webhook(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
            : base("launchdarkly:index/webhook:Webhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/primait/pulumi-launchdarkly",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Webhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Webhook Get(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new Webhook(name, id, state, options);
        }
    }

    public sealed class WebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The webhook's human-readable name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether the webhook is enabled.
        /// </summary>
        [Input("on")]
        public Input<bool>? On { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The secret used to sign the webhook.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("statements")]
        private InputList<Inputs.WebhookStatementArgs>? _statements;

        /// <summary>
        /// List of policy statement blocks used to filter webhook events. For more information on webhook policy filters read [Adding a policy filter](https://docs.launchdarkly.com/integrations/webhooks#adding-a-policy-filter).
        /// </summary>
        public InputList<Inputs.WebhookStatementArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.WebhookStatementArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The URL of the remote webhook.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public WebhookArgs()
        {
        }
        public static new WebhookArgs Empty => new WebhookArgs();
    }

    public sealed class WebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The webhook's human-readable name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether the webhook is enabled.
        /// </summary>
        [Input("on")]
        public Input<bool>? On { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The secret used to sign the webhook.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("statements")]
        private InputList<Inputs.WebhookStatementGetArgs>? _statements;

        /// <summary>
        /// List of policy statement blocks used to filter webhook events. For more information on webhook policy filters read [Adding a policy filter](https://docs.launchdarkly.com/integrations/webhooks#adding-a-policy-filter).
        /// </summary>
        public InputList<Inputs.WebhookStatementGetArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.WebhookStatementGetArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The URL of the remote webhook.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public WebhookState()
        {
        }
        public static new WebhookState Empty => new WebhookState();
    }
}
