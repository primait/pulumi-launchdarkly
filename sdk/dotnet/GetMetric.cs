// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetMetric
    {
        /// <summary>
        /// Provides a LaunchDarkly metric data source.
        /// 
        /// This data source allows you to retrieve metric information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetMetric.Invoke(new()
        ///     {
        ///         Key = "example-metric",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMetricResult> InvokeAsync(GetMetricArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricResult>("launchdarkly:index/getMetric:getMetric", args ?? new GetMetricArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly metric data source.
        /// 
        /// This data source allows you to retrieve metric information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetMetric.Invoke(new()
        ///     {
        ///         Key = "example-metric",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetricResult> Invoke(GetMetricInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricResult>("launchdarkly:index/getMetric:getMetric", args ?? new GetMetricInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly metric data source.
        /// 
        /// This data source allows you to retrieve metric information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetMetric.Invoke(new()
        ///     {
        ///         Key = "example-metric",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetricResult> Invoke(GetMetricInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricResult>("launchdarkly:index/getMetric:getMetric", args ?? new GetMetricInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Ignored. All metrics are considered active.
        /// </summary>
        [Input("isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        /// <summary>
        /// The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey", required: true)]
        public string ProjectKey { get; set; } = null!;

        public GetMetricArgs()
        {
        }
        public static new GetMetricArgs Empty => new GetMetricArgs();
    }

    public sealed class GetMetricInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Ignored. All metrics are considered active.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        public GetMetricInvokeArgs()
        {
        }
        public static new GetMetricInvokeArgs Empty => new GetMetricInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricResult
    {
        /// <summary>
        /// The method for analyzing metric events. Available choices are `mean` and `percentile`.
        /// </summary>
        public readonly string AnalysisType;
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The event key for your metric (if custom metric)
        /// </summary>
        public readonly string EventKey;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Include units that did not send any events and set their value to 0.
        /// </summary>
        public readonly bool IncludeUnitsWithoutEvents;
        /// <summary>
        /// Ignored. All metrics are considered active.
        /// </summary>
        public readonly bool IsActive;
        /// <summary>
        /// Whether a `custom` metric is a numeric metric or not.
        /// </summary>
        public readonly bool IsNumeric;
        /// <summary>
        /// The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`.
        /// </summary>
        public readonly string Kind;
        public readonly string MaintainerId;
        /// <summary>
        /// The human-friendly name for the metric.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when analysis_type is percentile.
        /// </summary>
        public readonly int PercentileValue;
        /// <summary>
        /// The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        public readonly string ProjectKey;
        /// <summary>
        /// A set of one or more context kinds that this metric can measure events from. Metrics can only use context kinds marked as "Available for experiments." For more information, read [Allocating experiment audiences](https://docs.launchdarkly.com/home/creating-experiments/allocation).
        /// </summary>
        public readonly ImmutableArray<string> RandomizationUnits;
        /// <summary>
        /// The CSS selector for your metric (if click metric)
        /// </summary>
        public readonly string Selector;
        /// <summary>
        /// The success criteria for your metric (if numeric metric). Available choices are `HigherThanBaseline` and `LowerThanBaseline`.
        /// </summary>
        public readonly string SuccessCriteria;
        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// (Required for kind `custom`) The unit for numeric `custom` metrics.
        /// </summary>
        public readonly string Unit;
        /// <summary>
        /// The method by which multiple unit event values are aggregated. Available choices are `average` and `sum`.
        /// </summary>
        public readonly string UnitAggregationType;
        /// <summary>
        /// List of nested `url` blocks describing URLs that you want to associate with the metric.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricUrlResult> Urls;
        /// <summary>
        /// Version of the metric
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetMetricResult(
            string analysisType,

            string description,

            string eventKey,

            string id,

            bool includeUnitsWithoutEvents,

            bool isActive,

            bool isNumeric,

            string key,

            string kind,

            string maintainerId,

            string name,

            int percentileValue,

            string projectKey,

            ImmutableArray<string> randomizationUnits,

            string selector,

            string successCriteria,

            ImmutableArray<string> tags,

            string unit,

            string unitAggregationType,

            ImmutableArray<Outputs.GetMetricUrlResult> urls,

            int version)
        {
            AnalysisType = analysisType;
            Description = description;
            EventKey = eventKey;
            Id = id;
            IncludeUnitsWithoutEvents = includeUnitsWithoutEvents;
            IsActive = isActive;
            IsNumeric = isNumeric;
            Key = key;
            Kind = kind;
            MaintainerId = maintainerId;
            Name = name;
            PercentileValue = percentileValue;
            ProjectKey = projectKey;
            RandomizationUnits = randomizationUnits;
            Selector = selector;
            SuccessCriteria = successCriteria;
            Tags = tags;
            Unit = unit;
            UnitAggregationType = unitAggregationType;
            Urls = urls;
            Version = version;
        }
    }
}
