// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly.Inputs
{

    public sealed class FeatureFlagEnvironmentRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Group percentage rollout by a custom attribute. This argument is only valid if `rollout_weights` is also specified.
        /// </summary>
        [Input("bucketBy")]
        public Input<string>? BucketBy { get; set; }

        [Input("clauses")]
        private InputList<Inputs.FeatureFlagEnvironmentRuleClauseGetArgs>? _clauses;

        /// <summary>
        /// List of nested blocks specifying the logical clauses to evaluate
        /// </summary>
        public InputList<Inputs.FeatureFlagEnvironmentRuleClauseGetArgs> Clauses
        {
            get => _clauses ?? (_clauses = new InputList<Inputs.FeatureFlagEnvironmentRuleClauseGetArgs>());
            set => _clauses = value;
        }

        /// <summary>
        /// The context kind associated with the specified rollout. This argument is only valid if `rollout_weights` is also specified. Defaults to `user` if omitted.
        /// </summary>
        [Input("contextKind")]
        public Input<string>? ContextKind { get; set; }

        /// <summary>
        /// A human-readable description of the targeting rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("rolloutWeights")]
        private InputList<int>? _rolloutWeights;

        /// <summary>
        /// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
        /// </summary>
        public InputList<int> RolloutWeights
        {
            get => _rolloutWeights ?? (_rolloutWeights = new InputList<int>());
            set => _rolloutWeights = value;
        }

        /// <summary>
        /// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rollout_weights`
        /// </summary>
        [Input("variation")]
        public Input<int>? Variation { get; set; }

        public FeatureFlagEnvironmentRuleGetArgs()
        {
        }
        public static new FeatureFlagEnvironmentRuleGetArgs Empty => new FeatureFlagEnvironmentRuleGetArgs();
    }
}
