// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetAuditLogSubscription
    {
        /// <summary>
        /// Provides a LaunchDarkly audit log subscription data source.
        /// 
        /// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Launchdarkly.GetAuditLogSubscription.Invoke(new()
        ///     {
        ///         Id = "5f0cd446a77cba0b4c5644a7",
        ///         IntegrationKey = "msteams",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAuditLogSubscriptionResult> InvokeAsync(GetAuditLogSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditLogSubscriptionResult>("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args ?? new GetAuditLogSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly audit log subscription data source.
        /// 
        /// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Launchdarkly.GetAuditLogSubscription.Invoke(new()
        ///     {
        ///         Id = "5f0cd446a77cba0b4c5644a7",
        ///         IntegrationKey = "msteams",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditLogSubscriptionResult> Invoke(GetAuditLogSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditLogSubscriptionResult>("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args ?? new GetAuditLogSubscriptionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly audit log subscription data source.
        /// 
        /// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Launchdarkly.GetAuditLogSubscription.Invoke(new()
        ///     {
        ///         Id = "5f0cd446a77cba0b4c5644a7",
        ///         IntegrationKey = "msteams",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditLogSubscriptionResult> Invoke(GetAuditLogSubscriptionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditLogSubscriptionResult>("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args ?? new GetAuditLogSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditLogSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The audit log subscription ID.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
        /// </summary>
        [Input("integrationKey", required: true)]
        public string IntegrationKey { get; set; } = null!;

        public GetAuditLogSubscriptionArgs()
        {
        }
        public static new GetAuditLogSubscriptionArgs Empty => new GetAuditLogSubscriptionArgs();
    }

    public sealed class GetAuditLogSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The audit log subscription ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
        /// </summary>
        [Input("integrationKey", required: true)]
        public Input<string> IntegrationKey { get; set; } = null!;

        public GetAuditLogSubscriptionInvokeArgs()
        {
        }
        public static new GetAuditLogSubscriptionInvokeArgs Empty => new GetAuditLogSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditLogSubscriptionResult
    {
        public readonly ImmutableDictionary<string, string> Config;
        /// <summary>
        /// The audit log subscription ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The integration key. Supported integration keys are `chronosphere`, `cloudtrail`, `datadog`, `dynatrace`, `elastic`, `grafana`, `honeycomb`, `kosli`, `last9`, `logdna`, `msteams`, `new-relic-apm`, `pagerduty`, `signalfx`, `slack`, and `splunk`.
        /// </summary>
        public readonly string IntegrationKey;
        /// <summary>
        /// A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether or not you want your subscription enabled, i.e. to actively send events.
        /// </summary>
        public readonly bool On;
        /// <summary>
        /// A block representing the resources to which you wish to subscribe.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditLogSubscriptionStatementResult> Statements;
        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetAuditLogSubscriptionResult(
            ImmutableDictionary<string, string> config,

            string id,

            string integrationKey,

            string name,

            bool on,

            ImmutableArray<Outputs.GetAuditLogSubscriptionStatementResult> statements,

            ImmutableArray<string> tags)
        {
            Config = config;
            Id = id;
            IntegrationKey = integrationKey;
            Name = name;
            On = on;
            Statements = statements;
            Tags = tags;
        }
    }
}
