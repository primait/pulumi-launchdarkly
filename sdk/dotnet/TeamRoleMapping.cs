// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Launchdarkly = Pulumi.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var platformTeam = new Launchdarkly.TeamRoleMapping("platform_team", new()
    ///     {
    ///         TeamKey = "platform_team",
    ///         CustomRoleKeys = new[]
    ///         {
    ///             "platform",
    ///             "nomad-administrators",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A LaunchDarkly team/role mapping can be imported using the team key:
    /// 
    /// ```sh
    /// $ pulumi import launchdarkly:index/teamRoleMapping:TeamRoleMapping platform_team platform_team
    /// ```
    /// </summary>
    [LaunchdarklyResourceType("launchdarkly:index/teamRoleMapping:TeamRoleMapping")]
    public partial class TeamRoleMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        /// </summary>
        [Output("customRoleKeys")]
        public Output<ImmutableArray<string>> CustomRoleKeys { get; private set; } = null!;

        /// <summary>
        /// The team key.
        /// </summary>
        [Output("teamKey")]
        public Output<string> TeamKey { get; private set; } = null!;


        /// <summary>
        /// Create a TeamRoleMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamRoleMapping(string name, TeamRoleMappingArgs args, CustomResourceOptions? options = null)
            : base("launchdarkly:index/teamRoleMapping:TeamRoleMapping", name, args ?? new TeamRoleMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamRoleMapping(string name, Input<string> id, TeamRoleMappingState? state = null, CustomResourceOptions? options = null)
            : base("launchdarkly:index/teamRoleMapping:TeamRoleMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/primait/pulumi-launchdarkly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamRoleMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamRoleMapping Get(string name, Input<string> id, TeamRoleMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamRoleMapping(name, id, state, options);
        }
    }

    public sealed class TeamRoleMappingArgs : global::Pulumi.ResourceArgs
    {
        [Input("customRoleKeys", required: true)]
        private InputList<string>? _customRoleKeys;

        /// <summary>
        /// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        /// </summary>
        public InputList<string> CustomRoleKeys
        {
            get => _customRoleKeys ?? (_customRoleKeys = new InputList<string>());
            set => _customRoleKeys = value;
        }

        /// <summary>
        /// The team key.
        /// </summary>
        [Input("teamKey", required: true)]
        public Input<string> TeamKey { get; set; } = null!;

        public TeamRoleMappingArgs()
        {
        }
        public static new TeamRoleMappingArgs Empty => new TeamRoleMappingArgs();
    }

    public sealed class TeamRoleMappingState : global::Pulumi.ResourceArgs
    {
        [Input("customRoleKeys")]
        private InputList<string>? _customRoleKeys;

        /// <summary>
        /// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
        /// </summary>
        public InputList<string> CustomRoleKeys
        {
            get => _customRoleKeys ?? (_customRoleKeys = new InputList<string>());
            set => _customRoleKeys = value;
        }

        /// <summary>
        /// The team key.
        /// </summary>
        [Input("teamKey")]
        public Input<string>? TeamKey { get; set; }

        public TeamRoleMappingState()
        {
        }
        public static new TeamRoleMappingState Empty => new TeamRoleMappingState();
    }
}
