// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetFlagTrigger
    {
        /// <summary>
        /// Provides a LaunchDarkly flag trigger data source.
        /// 
        /// &gt; **Note:** Flag triggers are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        /// 
        /// This data source allows you to retrieve information about flag triggers from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFlagTrigger.Invoke(new()
        ///     {
        ///         Id = "61d490757f7821150815518f",
        ///         FlagKey = "example-flag",
        ///         ProjectKey = "the-big-project",
        ///         EnvKey = "production",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFlagTriggerResult> InvokeAsync(GetFlagTriggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFlagTriggerResult>("launchdarkly:index/getFlagTrigger:getFlagTrigger", args ?? new GetFlagTriggerArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly flag trigger data source.
        /// 
        /// &gt; **Note:** Flag triggers are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        /// 
        /// This data source allows you to retrieve information about flag triggers from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFlagTrigger.Invoke(new()
        ///     {
        ///         Id = "61d490757f7821150815518f",
        ///         FlagKey = "example-flag",
        ///         ProjectKey = "the-big-project",
        ///         EnvKey = "production",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFlagTriggerResult> Invoke(GetFlagTriggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFlagTriggerResult>("launchdarkly:index/getFlagTrigger:getFlagTrigger", args ?? new GetFlagTriggerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly flag trigger data source.
        /// 
        /// &gt; **Note:** Flag triggers are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        /// 
        /// This data source allows you to retrieve information about flag triggers from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFlagTrigger.Invoke(new()
        ///     {
        ///         Id = "61d490757f7821150815518f",
        ///         FlagKey = "example-flag",
        ///         ProjectKey = "the-big-project",
        ///         EnvKey = "production",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFlagTriggerResult> Invoke(GetFlagTriggerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFlagTriggerResult>("launchdarkly:index/getFlagTrigger:getFlagTrigger", args ?? new GetFlagTriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFlagTriggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique key of the environment the flag trigger will work in.
        /// </summary>
        [Input("envKey", required: true)]
        public string EnvKey { get; set; } = null!;

        /// <summary>
        /// The unique key of the associated flag.
        /// </summary>
        [Input("flagKey", required: true)]
        public string FlagKey { get; set; } = null!;

        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("projectKey", required: true)]
        public string ProjectKey { get; set; } = null!;

        public GetFlagTriggerArgs()
        {
        }
        public static new GetFlagTriggerArgs Empty => new GetFlagTriggerArgs();
    }

    public sealed class GetFlagTriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique key of the environment the flag trigger will work in.
        /// </summary>
        [Input("envKey", required: true)]
        public Input<string> EnvKey { get; set; } = null!;

        /// <summary>
        /// The unique key of the associated flag.
        /// </summary>
        [Input("flagKey", required: true)]
        public Input<string> FlagKey { get; set; } = null!;

        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        public GetFlagTriggerInvokeArgs()
        {
        }
        public static new GetFlagTriggerInvokeArgs Empty => new GetFlagTriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetFlagTriggerResult
    {
        public readonly bool Enabled;
        /// <summary>
        /// The unique key of the environment the flag trigger will work in.
        /// </summary>
        public readonly string EnvKey;
        /// <summary>
        /// The unique key of the associated flag.
        /// </summary>
        public readonly string FlagKey;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetFlagTriggerInstructionResult> Instructions;
        public readonly string IntegrationKey;
        public readonly string MaintainerId;
        public readonly string ProjectKey;
        public readonly string TriggerUrl;

        [OutputConstructor]
        private GetFlagTriggerResult(
            bool enabled,

            string envKey,

            string flagKey,

            string id,

            ImmutableArray<Outputs.GetFlagTriggerInstructionResult> instructions,

            string integrationKey,

            string maintainerId,

            string projectKey,

            string triggerUrl)
        {
            Enabled = enabled;
            EnvKey = envKey;
            FlagKey = flagKey;
            Id = id;
            Instructions = instructions;
            IntegrationKey = integrationKey;
            MaintainerId = maintainerId;
            ProjectKey = projectKey;
            TriggerUrl = triggerUrl;
        }
    }
}
