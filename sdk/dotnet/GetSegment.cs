// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetSegment
    {
        /// <summary>
        /// Provides a LaunchDarkly segment data source.
        /// 
        /// This data source allows you to retrieve segment information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetSegment.Invoke(new()
        ///     {
        ///         Key = "example-segment",
        ///         ProjectKey = "example-project",
        ///         EnvKey = "example-env",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSegmentResult> InvokeAsync(GetSegmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSegmentResult>("launchdarkly:index/getSegment:getSegment", args ?? new GetSegmentArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly segment data source.
        /// 
        /// This data source allows you to retrieve segment information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetSegment.Invoke(new()
        ///     {
        ///         Key = "example-segment",
        ///         ProjectKey = "example-project",
        ///         EnvKey = "example-env",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSegmentResult> Invoke(GetSegmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSegmentResult>("launchdarkly:index/getSegment:getSegment", args ?? new GetSegmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly segment data source.
        /// 
        /// This data source allows you to retrieve segment information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetSegment.Invoke(new()
        ///     {
        ///         Key = "example-segment",
        ///         ProjectKey = "example-project",
        ///         EnvKey = "example-env",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSegmentResult> Invoke(GetSegmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSegmentResult>("launchdarkly:index/getSegment:getSegment", args ?? new GetSegmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSegmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The segment's environment key.
        /// </summary>
        [Input("envKey", required: true)]
        public string EnvKey { get; set; } = null!;

        /// <summary>
        /// The unique key that references the segment.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        /// <summary>
        /// The segment's project key.
        /// </summary>
        [Input("projectKey", required: true)]
        public string ProjectKey { get; set; } = null!;

        public GetSegmentArgs()
        {
        }
        public static new GetSegmentArgs Empty => new GetSegmentArgs();
    }

    public sealed class GetSegmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The segment's environment key.
        /// </summary>
        [Input("envKey", required: true)]
        public Input<string> EnvKey { get; set; } = null!;

        /// <summary>
        /// The unique key that references the segment.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The segment's project key.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        public GetSegmentInvokeArgs()
        {
        }
        public static new GetSegmentInvokeArgs Empty => new GetSegmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetSegmentResult
    {
        /// <summary>
        /// The segment's creation date represented as a UNIX epoch timestamp.
        /// </summary>
        public readonly int CreationDate;
        /// <summary>
        /// The description of the segment's purpose.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The segment's environment key.
        /// </summary>
        public readonly string EnvKey;
        /// <summary>
        /// List of non-user target objects excluded from the segment. This attribute is not valid when `unbounded` is set to `true`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSegmentExcludedContextResult> ExcludedContexts;
        /// <summary>
        /// List of user keys excluded from the segment. To target on other context kinds, use the excluded_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        /// </summary>
        public readonly ImmutableArray<string> Excludeds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of non-user target objects included in the segment. This attribute is not valid when `unbounded` is set to `true`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSegmentIncludedContextResult> IncludedContexts;
        /// <summary>
        /// List of user keys included in the segment. To target on other context kinds, use the included_contexts block attribute. This attribute is not valid when `unbounded` is set to `true`.
        /// </summary>
        public readonly ImmutableArray<string> Includeds;
        /// <summary>
        /// The unique key that references the segment.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The human-friendly name for the segment.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The segment's project key.
        /// </summary>
        public readonly string ProjectKey;
        /// <summary>
        /// List of nested custom rule blocks to apply to the segment. This attribute is not valid when `unbounded` is set to `true`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSegmentRuleResult> Rules;
        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly bool Unbounded;
        /// <summary>
        /// For Big Segments, the targeted context kind. If this attribute is not specified it will default to `user`.
        /// </summary>
        public readonly string UnboundedContextKind;

        [OutputConstructor]
        private GetSegmentResult(
            int creationDate,

            string description,

            string envKey,

            ImmutableArray<Outputs.GetSegmentExcludedContextResult> excludedContexts,

            ImmutableArray<string> excludeds,

            string id,

            ImmutableArray<Outputs.GetSegmentIncludedContextResult> includedContexts,

            ImmutableArray<string> includeds,

            string key,

            string name,

            string projectKey,

            ImmutableArray<Outputs.GetSegmentRuleResult> rules,

            ImmutableArray<string> tags,

            bool unbounded,

            string unboundedContextKind)
        {
            CreationDate = creationDate;
            Description = description;
            EnvKey = envKey;
            ExcludedContexts = excludedContexts;
            Excludeds = excludeds;
            Id = id;
            IncludedContexts = includedContexts;
            Includeds = includeds;
            Key = key;
            Name = name;
            ProjectKey = projectKey;
            Rules = rules;
            Tags = tags;
            Unbounded = unbounded;
            UnboundedContextKind = unboundedContextKind;
        }
    }
}
