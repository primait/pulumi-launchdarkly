// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetTeam
    {
        /// <summary>
        /// Provides a LaunchDarkly team data source.
        /// 
        /// This data source allows you to retrieve team information from your LaunchDarkly organization.
        /// 
        /// &gt; **Note:** Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var platformTeam = Launchdarkly.GetTeam.Invoke(new()
        ///     {
        ///         Key = "platform_team",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTeamResult> InvokeAsync(GetTeamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamResult>("launchdarkly:index/getTeam:getTeam", args ?? new GetTeamArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly team data source.
        /// 
        /// This data source allows you to retrieve team information from your LaunchDarkly organization.
        /// 
        /// &gt; **Note:** Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var platformTeam = Launchdarkly.GetTeam.Invoke(new()
        ///     {
        ///         Key = "platform_team",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTeamResult> Invoke(GetTeamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamResult>("launchdarkly:index/getTeam:getTeam", args ?? new GetTeamInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly team data source.
        /// 
        /// This data source allows you to retrieve team information from your LaunchDarkly organization.
        /// 
        /// &gt; **Note:** Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var platformTeam = Launchdarkly.GetTeam.Invoke(new()
        ///     {
        ///         Key = "platform_team",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTeamResult> Invoke(GetTeamInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamResult>("launchdarkly:index/getTeam:getTeam", args ?? new GetTeamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The team key.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        [Input("roleAttributes")]
        private List<Inputs.GetTeamRoleAttributeArgs>? _roleAttributes;

        /// <summary>
        /// A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
        /// </summary>
        public List<Inputs.GetTeamRoleAttributeArgs> RoleAttributes
        {
            get => _roleAttributes ?? (_roleAttributes = new List<Inputs.GetTeamRoleAttributeArgs>());
            set => _roleAttributes = value;
        }

        public GetTeamArgs()
        {
        }
        public static new GetTeamArgs Empty => new GetTeamArgs();
    }

    public sealed class GetTeamInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The team key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("roleAttributes")]
        private InputList<Inputs.GetTeamRoleAttributeInputArgs>? _roleAttributes;

        /// <summary>
        /// A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
        /// </summary>
        public InputList<Inputs.GetTeamRoleAttributeInputArgs> RoleAttributes
        {
            get => _roleAttributes ?? (_roleAttributes = new InputList<Inputs.GetTeamRoleAttributeInputArgs>());
            set => _roleAttributes = value;
        }

        public GetTeamInvokeArgs()
        {
        }
        public static new GetTeamInvokeArgs Empty => new GetTeamInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamResult
    {
        /// <summary>
        /// The list of the keys of the custom roles that you have assigned to the team.
        /// </summary>
        public readonly ImmutableArray<string> CustomRoleKeys;
        /// <summary>
        /// The team description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The team key.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The list of team maintainers as [team member objects](https://www.terraform.io/providers/launchdarkly/launchdarkly/latest/docs/data-sources/team_member).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTeamMaintainerResult> Maintainers;
        /// <summary>
        /// Human-readable name for the team.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of keys of the projects that the team has any write access to.
        /// </summary>
        public readonly ImmutableArray<string> ProjectKeys;
        /// <summary>
        /// A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTeamRoleAttributeResult> RoleAttributes;

        [OutputConstructor]
        private GetTeamResult(
            ImmutableArray<string> customRoleKeys,

            string description,

            string id,

            string key,

            ImmutableArray<Outputs.GetTeamMaintainerResult> maintainers,

            string name,

            ImmutableArray<string> projectKeys,

            ImmutableArray<Outputs.GetTeamRoleAttributeResult> roleAttributes)
        {
            CustomRoleKeys = customRoleKeys;
            Description = description;
            Id = id;
            Key = key;
            Maintainers = maintainers;
            Name = name;
            ProjectKeys = projectKeys;
            RoleAttributes = roleAttributes;
        }
    }
}
