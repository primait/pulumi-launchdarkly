// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetFeatureFlagEnvironment
    {
        /// <summary>
        /// Provides a LaunchDarkly environment-specific feature flag data source.
        /// 
        /// This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlagEnvironment.Invoke(new()
        ///     {
        ///         FlagId = "example-project/example-flag",
        ///         EnvKey = "example-env",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFeatureFlagEnvironmentResult> InvokeAsync(GetFeatureFlagEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFeatureFlagEnvironmentResult>("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args ?? new GetFeatureFlagEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly environment-specific feature flag data source.
        /// 
        /// This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlagEnvironment.Invoke(new()
        ///     {
        ///         FlagId = "example-project/example-flag",
        ///         EnvKey = "example-env",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFeatureFlagEnvironmentResult> Invoke(GetFeatureFlagEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureFlagEnvironmentResult>("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args ?? new GetFeatureFlagEnvironmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly environment-specific feature flag data source.
        /// 
        /// This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlagEnvironment.Invoke(new()
        ///     {
        ///         FlagId = "example-project/example-flag",
        ///         EnvKey = "example-env",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFeatureFlagEnvironmentResult> Invoke(GetFeatureFlagEnvironmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureFlagEnvironmentResult>("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args ?? new GetFeatureFlagEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFeatureFlagEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment key.
        /// </summary>
        [Input("envKey", required: true)]
        public string EnvKey { get; set; } = null!;

        /// <summary>
        /// The feature flag's unique `id` in the format `project_key/flag_key`.
        /// </summary>
        [Input("flagId", required: true)]
        public string FlagId { get; set; } = null!;

        public GetFeatureFlagEnvironmentArgs()
        {
        }
        public static new GetFeatureFlagEnvironmentArgs Empty => new GetFeatureFlagEnvironmentArgs();
    }

    public sealed class GetFeatureFlagEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment key.
        /// </summary>
        [Input("envKey", required: true)]
        public Input<string> EnvKey { get; set; } = null!;

        /// <summary>
        /// The feature flag's unique `id` in the format `project_key/flag_key`.
        /// </summary>
        [Input("flagId", required: true)]
        public Input<string> FlagId { get; set; } = null!;

        public GetFeatureFlagEnvironmentInvokeArgs()
        {
        }
        public static new GetFeatureFlagEnvironmentInvokeArgs Empty => new GetFeatureFlagEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetFeatureFlagEnvironmentResult
    {
        /// <summary>
        /// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentContextTargetResult> ContextTargets;
        /// <summary>
        /// The environment key.
        /// </summary>
        public readonly string EnvKey;
        /// <summary>
        /// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentFallthroughResult> Fallthroughs;
        /// <summary>
        /// The feature flag's unique `id` in the format `project_key/flag_key`.
        /// </summary>
        public readonly string FlagId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The index of the variation to serve if targeting is disabled.
        /// </summary>
        public readonly int OffVariation;
        /// <summary>
        /// Whether targeting is enabled. Defaults to `false` if not set.
        /// </summary>
        public readonly bool On;
        /// <summary>
        /// List of nested blocks describing prerequisite feature flags rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentPrerequisiteResult> Prerequisites;
        /// <summary>
        /// List of logical targeting rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentRuleResult> Rules;
        /// <summary>
        /// Set of nested blocks describing the individual user targets for each variation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentTargetResult> Targets;
        /// <summary>
        /// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
        /// </summary>
        public readonly bool TrackEvents;

        [OutputConstructor]
        private GetFeatureFlagEnvironmentResult(
            ImmutableArray<Outputs.GetFeatureFlagEnvironmentContextTargetResult> contextTargets,

            string envKey,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentFallthroughResult> fallthroughs,

            string flagId,

            string id,

            int offVariation,

            bool on,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentPrerequisiteResult> prerequisites,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentRuleResult> rules,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentTargetResult> targets,

            bool trackEvents)
        {
            ContextTargets = contextTargets;
            EnvKey = envKey;
            Fallthroughs = fallthroughs;
            FlagId = flagId;
            Id = id;
            OffVariation = offVariation;
            On = on;
            Prerequisites = prerequisites;
            Rules = rules;
            Targets = targets;
            TrackEvents = trackEvents;
        }
    }
}
