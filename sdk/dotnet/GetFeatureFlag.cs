// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetFeatureFlag
    {
        /// <summary>
        /// Provides a LaunchDarkly feature flag data source.
        /// 
        /// This data source allows you to retrieve feature flag information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlag.Invoke(new()
        ///     {
        ///         Key = "example-flag",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFeatureFlagResult> InvokeAsync(GetFeatureFlagArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFeatureFlagResult>("launchdarkly:index/getFeatureFlag:getFeatureFlag", args ?? new GetFeatureFlagArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly feature flag data source.
        /// 
        /// This data source allows you to retrieve feature flag information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlag.Invoke(new()
        ///     {
        ///         Key = "example-flag",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFeatureFlagResult> Invoke(GetFeatureFlagInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureFlagResult>("launchdarkly:index/getFeatureFlag:getFeatureFlag", args ?? new GetFeatureFlagInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly feature flag data source.
        /// 
        /// This data source allows you to retrieve feature flag information from your LaunchDarkly organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlag.Invoke(new()
        ///     {
        ///         Key = "example-flag",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFeatureFlagResult> Invoke(GetFeatureFlagInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureFlagResult>("launchdarkly:index/getFeatureFlag:getFeatureFlag", args ?? new GetFeatureFlagInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFeatureFlagArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique feature flag key that references the flag in your application code.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        [Input("maintainerId")]
        public string? MaintainerId { get; set; }

        /// <summary>
        /// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        /// </summary>
        [Input("maintainerTeamKey")]
        public string? MaintainerTeamKey { get; set; }

        /// <summary>
        /// The feature flag's project key.
        /// </summary>
        [Input("projectKey", required: true)]
        public string ProjectKey { get; set; } = null!;

        public GetFeatureFlagArgs()
        {
        }
        public static new GetFeatureFlagArgs Empty => new GetFeatureFlagArgs();
    }

    public sealed class GetFeatureFlagInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique feature flag key that references the flag in your application code.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        /// </summary>
        [Input("maintainerTeamKey")]
        public Input<string>? MaintainerTeamKey { get; set; }

        /// <summary>
        /// The feature flag's project key.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        public GetFeatureFlagInvokeArgs()
        {
        }
        public static new GetFeatureFlagInvokeArgs Empty => new GetFeatureFlagInvokeArgs();
    }


    [OutputType]
    public sealed class GetFeatureFlagResult
    {
        /// <summary>
        /// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
        /// </summary>
        public readonly bool Archived;
        public readonly ImmutableArray<Outputs.GetFeatureFlagClientSideAvailabilityResult> ClientSideAvailabilities;
        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagCustomPropertyResult> CustomProperties;
        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagDefaultResult> Defaults;
        /// <summary>
        /// The feature flag's description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatibility.
        /// </summary>
        public readonly bool IncludeInSnippet;
        /// <summary>
        /// The unique feature flag key that references the flag in your application code.
        /// </summary>
        public readonly string Key;
        public readonly string MaintainerId;
        /// <summary>
        /// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
        /// </summary>
        public readonly string MaintainerTeamKey;
        /// <summary>
        /// The feature flag's human-readable name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The feature flag's project key.
        /// </summary>
        public readonly string ProjectKey;
        /// <summary>
        /// Tags associated with your resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        public readonly bool Temporary;
        /// <summary>
        /// The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
        /// </summary>
        public readonly string VariationType;
        /// <summary>
        /// An array of possible variations for the flag
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagVariationResult> Variations;

        [OutputConstructor]
        private GetFeatureFlagResult(
            bool archived,

            ImmutableArray<Outputs.GetFeatureFlagClientSideAvailabilityResult> clientSideAvailabilities,

            ImmutableArray<Outputs.GetFeatureFlagCustomPropertyResult> customProperties,

            ImmutableArray<Outputs.GetFeatureFlagDefaultResult> defaults,

            string description,

            string id,

            bool includeInSnippet,

            string key,

            string maintainerId,

            string maintainerTeamKey,

            string name,

            string projectKey,

            ImmutableArray<string> tags,

            bool temporary,

            string variationType,

            ImmutableArray<Outputs.GetFeatureFlagVariationResult> variations)
        {
            Archived = archived;
            ClientSideAvailabilities = clientSideAvailabilities;
            CustomProperties = customProperties;
            Defaults = defaults;
            Description = description;
            Id = id;
            IncludeInSnippet = includeInSnippet;
            Key = key;
            MaintainerId = maintainerId;
            MaintainerTeamKey = maintainerTeamKey;
            Name = name;
            ProjectKey = projectKey;
            Tags = tags;
            Temporary = temporary;
            VariationType = variationType;
            Variations = variations;
        }
    }
}
